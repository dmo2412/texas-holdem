{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./javascript/js-new/preflop.js","webpack:///./javascript/js-new/deck.js","webpack:///./javascript/js-new/calling.js","webpack:///./node_modules/pokersolver/pokersolver.js","webpack:///./javascript/js-new/check.js","webpack:///./javascript/js-new/nextcard.js","webpack:///./javascript/js-new/raise.js","webpack:///./javascript/js-new/result.js","webpack:///./javascript/js-new/fold.js","webpack:///./javascript/js-new/game.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Preflop","window","player1","chips","deadmoney","currentBet","cardPool","holecards","showCards","status","player2","dealCount","pot","players","theData","deck","Deck","this","canvas","document","getElementById","ctx","getContext","player0","shift","push","setOrder","placeBlinds","createCards","cards","card1","cardVal","player1Cards","d3","select","selectAll","data","enter","append","text","attr","first","clearRect","width","height","beginPath","arc","Math","PI","fillStyle","fill","closePath","strokeStyle","stroke","remove","startScoreboard","suits","values","length","j","ele","concat","shuffleCards","temp","floor","random","Call","betRound","count","firstBet","middleCards","turnCount","Card","str","substr","suit","toLowerCase","rank","indexOf","wildValue","replace","a","b","Hand","game","canDisqualify","wilds","sfLength","alwaysQualifies","lowestQualified","obj","obj1","key1","card","handRank","handValues","constructor","map","sort","reverse","isPossible","solve","result","hand","compare","val","checkCardsLength","wildStatus","setRanks","wild","picks","excluding","filter","toString","join","hands","h","qualifiesHigh","highestRank","max","apply","lose","loseTo","Game","nonWilds","StraightFlush","super","resetWildCards","possibleStraight","nonCards","getCardsForFlush","sfQualify","descr","stripWilds","straight","Straight","slice","RoyalFlush","NaturalRoyalFlush","WildRoyalFlush","FiveOfAKind","getNumCardsByRank","nextHighest","cardsInHand","FourOfAKindPairPlus","type","FourOfAKind","noKickers","FourWilds","ThreeOfAKindTwoPair","FullHouse","Flush","checkCards","wheelStatus","getWheel","wildCount","getGaps","checkHandLength","wildCards","cardsToCheck","gapCards","cardsList","gapCount","prevCard","diff","stripReturn","wheelCards","cardFound","TwoThreeOfAKind","ThreeOfAKind","ThreePair","TwoPair","OnePair","HighCard","PaiGowPokerHelper","baseHand","hiHand","loHand","loGame","hiGame","Array","isArray","hiCards","loCards","handValue","sfReturn","altGame","altHand","altRank","getSFData","possibleSF","possibleLoCards","bestLoCards","bestHand","handsToCheck","compareHands","winners","player","banker","qualifiesValid","hiWinner","loWinner","fullHand","splitHouseWay","gameRules","exportToGlobal","global","Check","flopCount","turnBetCount","riverBetCount","NextCard","styledCards","Raise","SolveHand","require","playerHands","rez1","rez2","winner","setCardPool","returnWinner","player2cards","winningPlayerName","winningHand","JSON","stringify","console","log","Fold","calling","checking","nextCard","raising","folding","preflopCallFive","preflopCall","postflopCall","postTurnCall","postRiverCall","postFlop","postTurn","postRiver","solveHands","preflopCheck","postflopCheck","postTurnCheck","postRiverCheck","preflopTwoTimesRaise","postflopRaise","postTurnRaise","postRiverRaise","resetHand","addEventListener","deal","Cards","createGame","playerShift","innerHTML","onclick","dealCards","check","raiseTwoTimes","fold"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","import Deck from './deck';\n\nexport default class Preflop {\n    constructor() {\n        window.player1 = {\n            name: 'Mike McDermott',\n            chips: 1000,\n            deadmoney: 0,\n            currentBet: 0,\n            cardPool: [],\n            holecards: [],\n            showCards: {},\n            status: true\n        } \n        window.player2 = {\n            name: 'Phil Ivey',\n            chips: 1000,\n            deadmoney: 0,\n            currentBet: 0,\n            cardPool: [],\n            holecards: [],\n            showCards: {},\n            status: true\n        }\n        window.dealCount = 0;\n        window.pot = { name: 'Pot', chips: 0 }\n        window.players = [window.player1, window.player2];\n        window.theData = [window.player1, window.player2, window.pot];\n        window.deck = new Deck();\n        this.canvas = document.getElementById(\"myCanvas\");\n        this.ctx = this.canvas.getContext(\"2d\");\n    }\n\n    setOrder() {\n        let player0 = window.players[0];\n        window.players.shift();\n        window.players.push(player0);\n    }\n\n    dealCards() {\n        if (window.dealCount === 0){\n        this.setOrder();\n        this.placeBlinds();\n        window.deck.createCards();\n        for (let i = 0; i < 2; i++) {\n            window.players[0].holecards.push(window.deck.cards[0]);\n            window.players[0].cardPool.push(window.deck.cards[0]);\n            window.deck.cards.shift();\n            window.players[1].holecards.push(window.deck.cards[0]);\n            window.players[1].cardPool.push(window.deck.cards[0]);\n            window.deck.cards.shift();\n        }\n        window.player1Cards = [];\n\n        let card1;\n        let cardVal;\n        for (let i = 0; i < 2; i++) {\n            card1 = window.player1.holecards[i];\n            if (card1[1] === 'd') {\n                cardVal = card1[0] + '🔹'\n                window.player1Cards.push(cardVal)\n            } else if (card1[1] === 's') {\n                cardVal = card1[0] + '♠️'\n                window.player1Cards.push(cardVal)\n            } else if (card1[1] === 'h') {\n                cardVal = card1[0] + '❤️'\n                window.player1Cards.push(cardVal)\n            } else if (card1[1] === 'c') {\n                cardVal = card1[0] + '🍀'\n                window.player1Cards.push(cardVal)\n            }\n        }\n        window.dealCount += 1;\n        d3.select(\"#player1carddiv\").selectAll(\"p\")\n            .data(window.player1Cards)\n            .enter()\n            .append('p')\n            .text(function (d) { return d })\n            .attr(\"class\", 'player1cards')\n\n        d3.select(\"#player2carddiv\").selectAll(\"p\")\n            .data(['🎴🎴'])\n            .enter()\n            .append('p')\n            .text(function (d) { return d })\n            .attr(\"class\", 'player2cards')\n    }\n    }\n\n    placeBlinds() {\n        let first;\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n        if (window.players[0] === window.player1) {\n            window.player1.chips -= 5;\n            window.player1.deadmoney += 5;\n            window.player1.currentBet += 5;\n            this.ctx.beginPath();\n            this.ctx.arc(300, 20, 10, 0, Math.PI * 2);\n            this.ctx.fillStyle = \"tomato\";\n            this.ctx.text = '10';\n            this.ctx.fill();\n            this.ctx.closePath();\n            this.ctx.strokeStyle = \"black\";\n            this.ctx.stroke();\n\n            first = window.players[0]\n            window.players.shift();\n            window.players.push(first);\n\n            window.player2.chips -= 10;\n            window.player2.deadmoney += 10;\n            window.player2.currentBet += 10;\n            this.ctx.beginPath();\n            this.ctx.arc(260, 20, 10, 0, Math.PI * 2);\n            this.ctx.fillStyle = \"tomato\";\n            this.ctx.text = '10';\n            this.ctx.fill();\n            this.ctx.closePath();\n            this.ctx.strokeStyle = \"black\";\n            this.ctx.stroke();\n\n            first = window.players[0]\n            window.players.shift();\n            window.players.push(first);\n        } else if (window.players[0] === window.player2) {\n            window.player2.chips -= 5;\n            window.player2.deadmoney += 5;\n            window.player2.currentBet += 5;\n            this.ctx.beginPath();\n            this.ctx.arc(260, 20, 10, 0, Math.PI * 2);\n            this.ctx.fillStyle = \"tomato\";\n            this.ctx.text = '10';\n            this.ctx.fill();\n            this.ctx.closePath();\n            this.ctx.strokeStyle = \"black\";\n            this.ctx.stroke();\n\n            window.player1.chips -= 10;\n            window.player1.deadmoney += 10;\n            window.player1.currentBet += 10;\n\n            first = window.players[0]\n            window.players.shift();\n            window.players.push(first);\n\n            this.ctx.beginPath();\n            this.ctx.arc(270, 20, 10, 0, Math.PI * 2);\n            this.ctx.fillStyle = \"tomato\";\n            this.ctx.text = '10';\n            this.ctx.fill();\n            this.ctx.closePath();\n            this.ctx.strokeStyle = \"black\";\n            this.ctx.stroke();\n\n            first = window.players[0]\n            window.players.shift();\n            window.players.push(first);\n\n        } \n        window.pot.chips += 15;\n        d3.selectAll(\".playernames\").remove();\n        this.startScoreboard();\n    }\n\n    startScoreboard() {\n        d3.selectAll(\".playernames\").remove();\n        d3.select(\"#chipcount\").selectAll(\"p\")\n            .data(window.theData)\n            .enter()\n            .append(\"p\")\n            .text(function (d) { return d.name + \" : \" + d.chips; })\n            .attr(\"class\", \"playernames\");\n    }\n\n}","export default class Deck {\n    constructor() {\n        this.cards = [];\n    }\n\n    createCards() {\n        let suits = ['s', 'c', 'h', 'd'];\n        let values = ['2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A'];\n        for (let i = 0; i < values.length; i++) {\n            for (let j = 0; j < suits.length; j++) {\n                let ele = values[i].concat(suits[j]);\n                this.cards.push(ele);\n            }\n        }\n        this.shuffleCards(this.cards)\n        \n    }\n\n    shuffleCards() {\n        var i, j, temp;\n        for (i = this.cards.length - 1; i > 0; i--) {\n            j = Math.floor(Math.random() * (i + 1));\n            temp = this.cards[i];\n            this.cards[i] = this.cards[j];\n            this.cards[j] = temp;\n        };\n        return this.cards;\n\n    }\n    retainCards() {\n        return this.cards;\n    }\n\n    resetCards() {\n        this.createCards(this.cards);\n    }\n\n\n}\n\n\n","\n\nexport default class Call {\n    constructor() {\n        window.betRound = 0;\n        window.count = 0;\n        window.firstBet = 0;\n    }\n\n    preflopCallFive() {\n        if (window.firstBet === 0 && window.betRound === 0) {\n            if (window.players[0] === window.player1 && window.count === 0) {\n                window.player1.chips -= (window.player2.currentBet - window.player1.currentBet);\n                window.pot.chips += (window.player2.currentBet - window.player1.currentBet);\n                window.player1.deadmoney += (window.player2.currentBet - window.player1.currentBet);\n                window.player1.currentBet += (window.player2.currentBet - window.player1.currentBet);\n                let first = window.players[0];\n                window.players.shift();\n                window.players.push(first);\n            } else if (window.players[0] === window.player2 && window.count === 0) {\n                window.player2.chips -= (window.player1.currentBet - window.player2.currentBet);\n                window.pot.chips += (window.player1.currentBet - window.player2.currentBet);\n                window.player2.deadmoney += (window.player1.currentBet - window.player2.currentBet);\n                window.player2.currentBet += (window.player1.currentBet - window.player2.currentBet);\n                let first = window.players[0];\n                window.players.shift();\n                window.players.push(first);\n            }\n            window.firstBet += 1;\n           \n        }\n    }\n\n    preflopCall() {\n        if (window.firstBet > 0 && window.middleCards.length === 0 && window.players[1].currentBet > window.players[0].currentBet) {\n            window.players[0].chips -= (window.players[1].currentBet - window.players[0].currentBet);\n            \n            window.players[0].deadmoney += (window.players[1].currentBet -window.players[0].currentBet);\n            window.players[0].currentBet = (window.players[1].currentBet);\n            \n            window.pot.chips = window.players[1].currentBet + window.players[0].currentBet;\n            \n            let first = window.players[0];\n            window.players.shift();\n            window.players.push(first);\n            window.turnCount = 1;\n            \n        }\n    }\n\n    postflopCall() {\n        if (window.betRound === 1 && window.players[1].currentBet > window.players[0].currentBet) {\n            window.players[0].chips -= (window.players[1].currentBet - window.players[0].currentBet);\n            window.pot.chips += window.players[1].currentBet - window.players[0].currentBet;\n            window.players[0].deadmoney += (window.players[1].currentBet - window.players[0].currentBet);\n            window.players[0].currentBet = (window.players[1].currentBet);\n            let first = window.players[0];\n            window.players.shift();\n            window.players.push(first);\n            window.turnCount += 1;\n            window.betRound += 1;\n        }\n    }\n\n    postTurnCall() {\n        if (window.betRound === 3 && window.players[1].currentBet > window.players[0].currentBet) {\n            window.players[0].chips -= (window.players[1].currentBet - window.players[0].currentBet);\n            window.pot.chips += window.players[1].currentBet - window.players[0].currentBet;\n            window.players[0].deadmoney += (window.players[1].currentBet - window.players[0].currentBet);\n            window.players[0].currentBet = (window.players[1].currentBet);\n            let first = window.players[0];\n            window.players.shift();\n            window.players.push(first);\n            window.turnCount += 1;\n        }\n    }\n\n    postRiverCall() {\n        if (window.betRound === 4 && window.players[1].currentBet > window.players[0].currentBet) {\n            window.players[0].chips -= (window.players[1].currentBet - window.players[0].currentBet);\n            window.pot.chips += window.players[1].currentBet - window.players[0].currentBet;\n            window.players[0].deadmoney += (window.players[1].currentBet - window.players[0].currentBet);\n            window.players[0].currentBet = (window.players[1].currentBet);\n            let first = window.players[0];\n            window.players.shift();\n            window.players.push(first);\n            window.betRound += 1;\n        }\n    }\n\n\n\n    \n\n}","/**\n * pokersolver v2.1.2\n * Copyright (c) 2016, James Simpson of GoldFire Studios\n * http://goldfirestudios.com\n */\n(function () {\n  'use strict'; // NOTE: The 'joker' will be denoted with a value of 'O' and any suit.\n\n  var values = ['1', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A'];\n  /**\n   * Base Card class that defines a single card.\n   */\n\n  class Card {\n    constructor(str) {\n      this.value = str.substr(0, 1);\n      this.suit = str.substr(1, 1).toLowerCase();\n      this.rank = values.indexOf(this.value);\n      this.wildValue = str.substr(0, 1);\n    } // TODO: Add a parameter to leave out the suit and update the this.descr calls.\n\n\n    toString() {\n      return this.wildValue.replace('T', '10') + this.suit;\n    }\n\n    static sort(a, b) {\n      if (a.rank > b.rank) {\n        return -1;\n      } else if (a.rank < b.rank) {\n        return 1;\n      } else {\n        return 0;\n      }\n    }\n\n  }\n  /**\n   * Base Hand class that handles comparisons of full hands.\n   */\n\n\n  class Hand {\n    constructor(cards, name, game, canDisqualify) {\n      this.cardPool = [];\n      this.cards = [];\n      this.suits = {};\n      this.values = [];\n      this.wilds = [];\n      this.name = name;\n      this.game = game;\n      this.sfLength = 0;\n      this.alwaysQualifies = true; // Qualification rules apply for dealer's hand.\n      // Also applies for single player games, like video poker.\n\n      if (canDisqualify && this.game.lowestQualified) {\n        this.alwaysQualifies = false;\n      } // Get rank based on game.\n\n\n      var handRank = this.game.handValues.length;\n\n      for (var i = 0; i < this.game.handValues.length; i++) {\n        if (this.game.handValues[i] === this.constructor) {\n          break;\n        }\n      }\n\n      this.rank = handRank - i; // Set up the pool of cards.\n\n      this.cardPool = cards.map(function (c) {\n        return typeof c === 'string' ? new Card(c) : c;\n      }); // Fix the card ranks for wild cards, and sort.\n\n      for (var i = 0; i < this.cardPool.length; i++) {\n        card = this.cardPool[i];\n\n        if (card.value === this.game.wildValue) {\n          card.rank = -1;\n        }\n      }\n\n      this.cardPool = this.cardPool.sort(Card.sort); // Create the arrays of suits and values.\n\n      var obj, obj1, key, key1, card;\n\n      for (var i = 0; i < this.cardPool.length; i++) {\n        // Make sure this value already exists in the object.\n        card = this.cardPool[i]; // We do something special if this is a wild card.\n\n        if (card.rank === -1) {\n          this.wilds.push(card);\n        } else {\n          (obj = this.suits)[key = card.suit] || (obj[key] = []);\n          (obj1 = this.values)[key1 = card.rank] || (obj1[key1] = []); // Add the value to the array for that type in the object.\n\n          this.suits[card.suit].push(card);\n          this.values[card.rank].push(card);\n        }\n      }\n\n      this.values.reverse();\n      this.isPossible = this.solve();\n    }\n    /**\n     * Compare current hand with another to determine which is the winner.\n     * @param  {Hand} a Hand to compare to.\n     * @return {Number}\n     */\n\n\n    compare(a) {\n      if (this.rank < a.rank) {\n        return 1;\n      } else if (this.rank > a.rank) {\n        return -1;\n      }\n\n      var result = 0;\n\n      for (var i = 0; i <= 4; i++) {\n        if (this.cards[i] && a.cards[i] && this.cards[i].rank < a.cards[i].rank) {\n          result = 1;\n          break;\n        } else if (this.cards[i] && a.cards[i] && this.cards[i].rank > a.cards[i].rank) {\n          result = -1;\n          break;\n        }\n      }\n\n      return result;\n    }\n    /**\n     * Determine whether a hand loses to another.\n     * @param  {Hand} hand Hand to compare to.\n     * @return {Boolean}\n     */\n\n\n    loseTo(hand) {\n      return this.compare(hand) > 0;\n    }\n    /**\n     * Determine the number of cards in a hand of a rank.\n     * @param  {Number} val Index of this.values.\n     * @return {Number} Number of cards having the rank, including wild cards.\n     */\n\n\n    getNumCardsByRank(val) {\n      var cards = this.values[val];\n      var checkCardsLength = cards ? cards.length : 0;\n\n      for (var i = 0; i < this.wilds.length; i++) {\n        if (this.wilds[i].rank > -1) {\n          continue;\n        } else if (cards) {\n          if (this.game.wildStatus === 1 || cards[0].rank === values.length - 1) {\n            checkCardsLength += 1;\n          }\n        } else if (this.game.wildStatus === 1 || val === values.length - 1) {\n          checkCardsLength += 1;\n        }\n      }\n\n      return checkCardsLength;\n    }\n    /**\n     * Determine the cards in a suit for a flush.\n     * @param  {String} suit Key for this.suits.\n     * @param  {Boolean} setRanks Whether to set the ranks for the wild cards.\n     * @return {Array} Cards having the suit, including wild cards.\n     */\n\n\n    getCardsForFlush(suit, setRanks) {\n      var cards = (this.suits[suit] || []).sort(Card.sort);\n\n      for (var i = 0; i < this.wilds.length; i++) {\n        var wild = this.wilds[i];\n\n        if (setRanks) {\n          var j = 0;\n\n          while (j < values.length && j < cards.length) {\n            if (cards[j].rank === values.length - 1 - j) {\n              j += 1;\n            } else {\n              break;\n            }\n          }\n\n          wild.rank = values.length - 1 - j;\n          wild.wildValue = values[wild.rank];\n        }\n\n        cards.push(wild);\n        cards = cards.sort(Card.sort);\n      }\n\n      return cards;\n    }\n    /**\n     * Resets the rank and wild values of the wild cards.\n     */\n\n\n    resetWildCards() {\n      for (var i = 0; i < this.wilds.length; i++) {\n        this.wilds[i].rank = -1;\n        this.wilds[i].wildValue = this.wilds[i].value;\n      }\n    }\n    /**\n     * Highest card comparison.\n     * @return {Array} Highest cards\n     */\n\n\n    nextHighest() {\n      var picks;\n      var excluding = [];\n      excluding = excluding.concat(this.cards);\n      picks = this.cardPool.filter(function (card) {\n        if (excluding.indexOf(card) < 0) {\n          return true;\n        }\n      }); // Account for remaining wild card when it must be ace.\n\n      if (this.game.wildStatus === 0) {\n        for (var i = 0; i < picks.length; i++) {\n          var card = picks[i];\n\n          if (card.rank === -1) {\n            card.wildValue = 'A';\n            card.rank = values.length - 1;\n          }\n        }\n\n        picks = picks.sort(Card.sort);\n      }\n\n      return picks;\n    }\n    /**\n     * Return list of contained cards in human readable format.\n     * @return {String}\n     */\n\n\n    toString() {\n      var cards = this.cards.map(function (c) {\n        return c.toString();\n      });\n      return cards.join(', ');\n    }\n    /**\n     * Return array of contained cards.\n     * @return {Array}\n     */\n\n\n    toArray() {\n      var cards = this.cards.map(function (c) {\n        return c.toString();\n      });\n      return cards;\n    }\n    /**\n     * Determine if qualifying hand.\n     * @return {Boolean}\n     */\n\n\n    qualifiesHigh() {\n      if (!this.game.lowestQualified || this.alwaysQualifies) {\n        return true;\n      }\n\n      return this.compare(Hand.solve(this.game.lowestQualified, this.game)) <= 0;\n    }\n    /**\n     * Find highest ranked hands and remove any that don't qualify or lose to another hand.\n     * @param  {Array} hands Hands to evaluate.\n     * @return {Array}       Winning hands.\n     */\n\n\n    static winners(hands) {\n      hands = hands.filter(function (h) {\n        return h.qualifiesHigh();\n      });\n      var highestRank = Math.max.apply(Math, hands.map(function (h) {\n        return h.rank;\n      }));\n      hands = hands.filter(function (h) {\n        return h.rank === highestRank;\n      });\n      hands = hands.filter(function (h) {\n        var lose = false;\n\n        for (var i = 0; i < hands.length; i++) {\n          lose = h.loseTo(hands[i]);\n\n          if (lose) {\n            break;\n          }\n        }\n\n        return !lose;\n      });\n      return hands;\n    }\n    /**\n     * Build and return the best hand.\n     * @param  {Array} cards Array of cards (['Ad', '3c', 'Th', ...]).\n     * @param  {String} game Game being played.\n     * @param  {Boolean} canDisqualify Check for a qualified hand.\n     * @return {Hand}       Best hand.\n     */\n\n\n    static solve(cards, game, canDisqualify) {\n      game = game || 'standard';\n      game = typeof game === 'string' ? new Game(game) : game;\n      cards = cards || [''];\n      var hands = game.handValues;\n      var result = null;\n\n      for (var i = 0; i < hands.length; i++) {\n        result = new hands[i](cards, game, canDisqualify);\n\n        if (result.isPossible) {\n          break;\n        }\n      }\n\n      return result;\n    }\n    /**\n     * Separate cards based on if they are wild cards.\n     * @param  {Array} cards Array of cards (['Ad', '3c', 'Th', ...]).\n     * @param  {Game} game Game being played.\n     * @return {Array} [wilds, nonWilds] Wild and non-Wild Cards.\n     */\n\n\n    static stripWilds(cards, game) {\n      var card, wilds, nonWilds;\n      cards = cards || [''];\n      wilds = [];\n      nonWilds = [];\n\n      for (var i = 0; i < cards.length; i++) {\n        card = cards[i];\n\n        if (card.rank === -1) {\n          wilds.push(cards[i]);\n        } else {\n          nonWilds.push(cards[i]);\n        }\n      }\n\n      return [wilds, nonWilds];\n    }\n\n  }\n\n  class StraightFlush extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Straight Flush', game, canDisqualify);\n    }\n\n    solve() {\n      var cards;\n      this.resetWildCards();\n      var possibleStraight = null;\n      var nonCards = [];\n\n      for (var suit in this.suits) {\n        cards = this.getCardsForFlush(suit, false);\n\n        if (cards && cards.length >= this.game.sfQualify) {\n          possibleStraight = cards;\n          break;\n        }\n      }\n\n      if (possibleStraight) {\n        if (this.game.descr !== 'standard') {\n          for (var suit in this.suits) {\n            if (possibleStraight[0].suit !== suit) {\n              nonCards = nonCards.concat(this.suits[suit] || []);\n              nonCards = Hand.stripWilds(nonCards, this.game)[1];\n            }\n          }\n        }\n\n        var straight = new Straight(possibleStraight, this.game);\n\n        if (straight.isPossible) {\n          this.cards = straight.cards;\n          this.cards = this.cards.concat(nonCards);\n          this.sfLength = straight.sfLength;\n        }\n      }\n\n      if (this.cards[0] && this.cards[0].rank === 13) {\n        this.descr = 'Royal Flush';\n      } else if (this.cards.length >= this.game.sfQualify) {\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + suit + ' High';\n      }\n\n      return this.cards.length >= this.game.sfQualify;\n    }\n\n  }\n\n  class RoyalFlush extends StraightFlush {\n    constructor(cards, game, canDisqualify) {\n      super(cards, game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n      var result = super.solve();\n      return result && this.descr === 'Royal Flush';\n    }\n\n  }\n\n  class NaturalRoyalFlush extends RoyalFlush {\n    constructor(cards, game, canDisqualify) {\n      super(cards, game, canDisqualify);\n    }\n\n    solve() {\n      var i = 0;\n      this.resetWildCards();\n      var result = super.solve();\n\n      if (result && this.cards) {\n        for (i = 0; i < this.game.sfQualify && i < this.cards.length; i++) {\n          if (this.cards[i].value === this.game.wildValue) {\n            result = false;\n            this.descr = 'Wild Royal Flush';\n            break;\n          }\n        }\n\n        if (i === this.game.sfQualify) {\n          this.descr = 'Royal Flush';\n        }\n      }\n\n      return result;\n    }\n\n  }\n\n  class WildRoyalFlush extends RoyalFlush {\n    constructor(cards, game, canDisqualify) {\n      super(cards, game, canDisqualify);\n    }\n\n    solve() {\n      var i = 0;\n      this.resetWildCards();\n      var result = super.solve();\n\n      if (result && this.cards) {\n        for (i = 0; i < this.game.sfQualify && i < this.cards.length; i++) {\n          if (this.cards[i].value === this.game.wildValue) {\n            this.descr = 'Wild Royal Flush';\n            break;\n          }\n        }\n\n        if (i === this.game.sfQualify) {\n          result = false;\n          this.descr = 'Royal Flush';\n        }\n      }\n\n      return result;\n    }\n\n  }\n\n  class FiveOfAKind extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Five of a Kind', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n\n      for (var i = 0; i < this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 5) {\n          this.cards = this.values[i] || [];\n\n          for (var j = 0; j < this.wilds.length && this.cards.length < 5; j++) {\n            var wild = this.wilds[j];\n\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand - 5));\n          break;\n        }\n      }\n\n      if (this.cards.length >= 5) {\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + '\\'s';\n      }\n\n      return this.cards.length >= 5;\n    }\n\n  }\n\n  class FourOfAKindPairPlus extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Four of a Kind with Pair or Better', game, canDisqualify);\n    }\n\n    solve() {\n      var cards;\n      this.resetWildCards();\n\n      for (var i = 0; i < this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 4) {\n          this.cards = this.values[i] || [];\n\n          for (var j = 0; j < this.wilds.length && this.cards.length < 4; j++) {\n            var wild = this.wilds[j];\n\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n\n          break;\n        }\n      }\n\n      if (this.cards.length === 4) {\n        for (i = 0; i < this.values.length; i++) {\n          cards = this.values[i];\n\n          if (cards && this.cards[0].wildValue === cards[0].wildValue) {\n            continue;\n          }\n\n          if (this.getNumCardsByRank(i) >= 2) {\n            this.cards = this.cards.concat(cards || []);\n\n            for (var j = 0; j < this.wilds.length; j++) {\n              var wild = this.wilds[j];\n\n              if (wild.rank !== -1) {\n                continue;\n              }\n\n              if (cards) {\n                wild.rank = cards[0].rank;\n              } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n                wild.rank = values.length - 2;\n              } else {\n                wild.rank = values.length - 1;\n              }\n\n              wild.wildValue = values[wild.rank];\n              this.cards.push(wild);\n            }\n\n            this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand - 6));\n            break;\n          }\n        }\n      }\n\n      if (this.cards.length >= 6) {\n        var type = this.cards[0].toString().slice(0, -1) + '\\'s over ' + this.cards[4].toString().slice(0, -1) + '\\'s';\n        this.descr = this.name + ', ' + type;\n      }\n\n      return this.cards.length >= 6;\n    }\n\n  }\n\n  class FourOfAKind extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Four of a Kind', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n\n      for (var i = 0; i < this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 4) {\n          this.cards = this.values[i] || [];\n\n          for (var j = 0; j < this.wilds.length && this.cards.length < 4; j++) {\n            var wild = this.wilds[j];\n\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand - 4));\n          break;\n        }\n      }\n\n      if (this.cards.length >= 4) {\n        if (this.game.noKickers) {\n          this.cards.length = 4;\n        }\n\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + '\\'s';\n      }\n\n      return this.cards.length >= 4;\n    }\n\n  }\n\n  class FourWilds extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Four Wild Cards', game, canDisqualify);\n    }\n\n    solve() {\n      if (this.wilds.length === 4) {\n        this.cards = this.wilds;\n        this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand - 4));\n      }\n\n      if (this.cards.length >= 4) {\n        if (this.game.noKickers) {\n          this.cards.length = 4;\n        }\n\n        this.descr = this.name;\n      }\n\n      return this.cards.length >= 4;\n    }\n\n  }\n\n  class ThreeOfAKindTwoPair extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Three of a Kind with Two Pair', game, canDisqualify);\n    }\n\n    solve() {\n      var cards;\n      this.resetWildCards();\n\n      for (var i = 0; i < this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 3) {\n          this.cards = this.values[i] || [];\n\n          for (var j = 0; j < this.wilds.length && this.cards.length < 3; j++) {\n            var wild = this.wilds[j];\n\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n\n          break;\n        }\n      }\n\n      if (this.cards.length === 3) {\n        for (var i = 0; i < this.values.length; i++) {\n          var cards = this.values[i];\n\n          if (cards && this.cards[0].wildValue === cards[0].wildValue) {\n            continue;\n          }\n\n          if (this.cards.length > 5 && this.getNumCardsByRank(i) === 2) {\n            this.cards = this.cards.concat(cards || []);\n\n            for (var j = 0; j < this.wilds.length; j++) {\n              var wild = this.wilds[j];\n\n              if (wild.rank !== -1) {\n                continue;\n              }\n\n              if (cards) {\n                wild.rank = cards[0].rank;\n              } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n                wild.rank = values.length - 2;\n              } else {\n                wild.rank = values.length - 1;\n              }\n\n              wild.wildValue = values[wild.rank];\n              this.cards.push(wild);\n            }\n\n            this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand - 4));\n            break;\n          } else if (this.getNumCardsByRank(i) === 2) {\n            this.cards = this.cards.concat(cards);\n\n            for (var j = 0; j < this.wilds.length; j++) {\n              var wild = this.wilds[j];\n\n              if (wild.rank !== -1) {\n                continue;\n              }\n\n              if (cards) {\n                wild.rank = cards[0].rank;\n              } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n                wild.rank = values.length - 2;\n              } else {\n                wild.rank = values.length - 1;\n              }\n\n              wild.wildValue = values[wild.rank];\n              this.cards.push(wild);\n            }\n          }\n        }\n      }\n\n      if (this.cards.length >= 7) {\n        var type = this.cards[0].toString().slice(0, -1) + '\\'s over ' + this.cards[3].toString().slice(0, -1) + '\\'s & ' + this.cards[5].value + '\\'s';\n        this.descr = this.name + ', ' + type;\n      }\n\n      return this.cards.length >= 7;\n    }\n\n  }\n\n  class FullHouse extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Full House', game, canDisqualify);\n    }\n\n    solve() {\n      var cards;\n      this.resetWildCards();\n\n      for (var i = 0; i < this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 3) {\n          this.cards = this.values[i] || [];\n\n          for (var j = 0; j < this.wilds.length && this.cards.length < 3; j++) {\n            var wild = this.wilds[j];\n\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n\n          break;\n        }\n      }\n\n      if (this.cards.length === 3) {\n        for (i = 0; i < this.values.length; i++) {\n          cards = this.values[i];\n\n          if (cards && this.cards[0].wildValue === cards[0].wildValue) {\n            continue;\n          }\n\n          if (this.getNumCardsByRank(i) >= 2) {\n            this.cards = this.cards.concat(cards || []);\n\n            for (var j = 0; j < this.wilds.length; j++) {\n              var wild = this.wilds[j];\n\n              if (wild.rank !== -1) {\n                continue;\n              }\n\n              if (cards) {\n                wild.rank = cards[0].rank;\n              } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n                wild.rank = values.length - 2;\n              } else {\n                wild.rank = values.length - 1;\n              }\n\n              wild.wildValue = values[wild.rank];\n              this.cards.push(wild);\n            }\n\n            this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand - 5));\n            break;\n          }\n        }\n      }\n\n      if (this.cards.length >= 5) {\n        var type = this.cards[0].toString().slice(0, -1) + '\\'s over ' + this.cards[3].toString().slice(0, -1) + '\\'s';\n        this.descr = this.name + ', ' + type;\n      }\n\n      return this.cards.length >= 5;\n    }\n\n  }\n\n  class Flush extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Flush', game, canDisqualify);\n    }\n\n    solve() {\n      this.sfLength = 0;\n      this.resetWildCards();\n\n      for (var suit in this.suits) {\n        var cards = this.getCardsForFlush(suit, true);\n\n        if (cards.length >= this.game.sfQualify) {\n          this.cards = cards;\n          break;\n        }\n      }\n\n      if (this.cards.length >= this.game.sfQualify) {\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + suit + ' High';\n        this.sfLength = this.cards.length;\n\n        if (this.cards.length < this.game.cardsInHand) {\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand - this.cards.length));\n        }\n      }\n\n      return this.cards.length >= this.game.sfQualify;\n    }\n\n  }\n\n  class Straight extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Straight', game, canDisqualify);\n    }\n\n    solve() {\n      var card, checkCards;\n      this.resetWildCards(); // There are still some games that count the wheel as second highest.\n      // These games do not have enough cards/wilds to make AKQJT and 5432A both possible.\n\n      if (this.game.wheelStatus === 1) {\n        this.cards = this.getWheel();\n\n        if (this.cards.length) {\n          var wildCount = 0;\n\n          for (var i = 0; i < this.cards.length; i++) {\n            card = this.cards[i];\n\n            if (card.value === this.game.wildValue) {\n              wildCount += 1;\n            }\n\n            if (card.rank === 0) {\n              card.rank = values.indexOf('A');\n              card.wildValue = 'A';\n\n              if (card.value === '1') {\n                card.value = 'A';\n              }\n            }\n          }\n\n          this.cards = this.cards.sort(Card.sort);\n\n          for (; wildCount < this.wilds.length && this.cards.length < this.game.cardsInHand; wildCount++) {\n            card = this.wilds[wildCount];\n            card.rank = values.indexOf('A');\n            card.wildValue = 'A';\n            this.cards.push(card);\n          }\n\n          this.descr = this.name + ', Wheel';\n          this.sfLength = this.sfQualify;\n\n          if (this.cards[0].value === 'A') {\n            this.cards = this.cards.concat(this.nextHighest().slice(1, this.game.cardsInHand - this.cards.length + 1));\n          } else {\n            this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand - this.cards.length));\n          }\n\n          return true;\n        }\n\n        this.resetWildCards();\n      }\n\n      this.cards = this.getGaps(); // Now add the wild cards, if any, and set the appropriate ranks\n\n      for (var i = 0; i < this.wilds.length; i++) {\n        card = this.wilds[i];\n        checkCards = this.getGaps(this.cards.length);\n\n        if (this.cards.length === checkCards.length) {\n          // This is an \"open-ended\" straight, the high rank is the highest possible rank.\n          if (this.cards[0].rank < values.length - 1) {\n            card.rank = this.cards[0].rank + 1;\n            card.wildValue = values[card.rank];\n            this.cards.push(card);\n          } else {\n            card.rank = this.cards[this.cards.length - 1].rank - 1;\n            card.wildValue = values[card.rank];\n            this.cards.push(card);\n          }\n        } else {\n          // This is an \"inside\" straight, the high card doesn't change.\n          for (var j = 1; j < this.cards.length; j++) {\n            if (this.cards[j - 1].rank - this.cards[j].rank > 1) {\n              card.rank = this.cards[j - 1].rank - 1;\n              card.wildValue = values[card.rank];\n              this.cards.push(card);\n              break;\n            }\n          }\n        }\n\n        this.cards = this.cards.sort(Card.sort);\n      }\n\n      if (this.cards.length >= this.game.sfQualify) {\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + ' High';\n        this.cards = this.cards.slice(0, this.game.cardsInHand);\n        this.sfLength = this.cards.length;\n\n        if (this.cards.length < this.game.cardsInHand) {\n          if (this.cards[this.sfLength - 1].rank === 0) {\n            this.cards = this.cards.concat(this.nextHighest().slice(1, this.game.cardsInHand - this.cards.length + 1));\n          } else {\n            this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand - this.cards.length));\n          }\n        }\n      }\n\n      return this.cards.length >= this.game.sfQualify;\n    }\n    /**\n     * Get the number of gaps in the straight.\n     * @return {Array} Highest potential straight with fewest number of gaps.\n     */\n\n\n    getGaps(checkHandLength) {\n      var wildCards, cardsToCheck, i, card, gapCards, cardsList, gapCount, prevCard, diff;\n      var stripReturn = Hand.stripWilds(this.cardPool, this.game);\n      wildCards = stripReturn[0];\n      cardsToCheck = stripReturn[1];\n\n      for (i = 0; i < cardsToCheck.length; i++) {\n        card = cardsToCheck[i];\n\n        if (card.wildValue === 'A') {\n          cardsToCheck.push(new Card('1' + card.suit));\n        }\n      }\n\n      cardsToCheck = cardsToCheck.sort(Card.sort);\n\n      if (checkHandLength) {\n        i = cardsToCheck[0].rank + 1;\n      } else {\n        checkHandLength = this.game.sfQualify;\n        i = values.length;\n      }\n\n      gapCards = [];\n\n      for (; i > 0; i--) {\n        cardsList = [];\n        gapCount = 0;\n\n        for (var j = 0; j < cardsToCheck.length; j++) {\n          card = cardsToCheck[j];\n\n          if (card.rank > i) {\n            continue;\n          }\n\n          prevCard = cardsList[cardsList.length - 1];\n          diff = prevCard ? prevCard.rank - card.rank : i - card.rank;\n\n          if (diff === null) {\n            cardsList.push(card);\n          } else if (checkHandLength < gapCount + diff + cardsList.length) {\n            break;\n          } else if (diff > 0) {\n            cardsList.push(card);\n            gapCount += diff - 1;\n          }\n        }\n\n        if (cardsList.length > gapCards.length) {\n          gapCards = cardsList.slice();\n        }\n\n        if (this.game.sfQualify - gapCards.length <= wildCards.length) {\n          break;\n        }\n      }\n\n      return gapCards;\n    }\n\n    getWheel() {\n      var wildCards, cardsToCheck, i, card, wheelCards, wildCount, cardFound;\n      var stripReturn = Hand.stripWilds(this.cardPool, this.game);\n      wildCards = stripReturn[0];\n      cardsToCheck = stripReturn[1];\n\n      for (i = 0; i < cardsToCheck.length; i++) {\n        card = cardsToCheck[i];\n\n        if (card.wildValue === 'A') {\n          cardsToCheck.push(new Card('1' + card.suit));\n        }\n      }\n\n      cardsToCheck = cardsToCheck.sort(Card.sort);\n      wheelCards = [];\n      wildCount = 0;\n\n      for (i = this.game.sfQualify - 1; i >= 0; i--) {\n        cardFound = false;\n\n        for (var j = 0; j < cardsToCheck.length; j++) {\n          card = cardsToCheck[j];\n\n          if (card.rank > i) {\n            continue;\n          }\n\n          if (card.rank < i) {\n            break;\n          }\n\n          wheelCards.push(card);\n          cardFound = true;\n          break;\n        }\n\n        if (!cardFound) {\n          if (wildCount < wildCards.length) {\n            wildCards[wildCount].rank = i;\n            wildCards[wildCount].wildValue = values[i];\n            wheelCards.push(wildCards[wildCount]);\n            wildCount += 1;\n          } else {\n            return [];\n          }\n        }\n      }\n\n      return wheelCards;\n    }\n\n  }\n\n  class TwoThreeOfAKind extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Two Three Of a Kind', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n\n      for (var i = 0; i < this.values.length; i++) {\n        var cards = this.values[i];\n\n        if (this.cards.length > 0 && this.getNumCardsByRank(i) === 3) {\n          this.cards = this.cards.concat(cards || []);\n\n          for (var j = 0; j < this.wilds.length; j++) {\n            var wild = this.wilds[j];\n\n            if (wild.rank !== -1) {\n              continue;\n            }\n\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand - 6));\n          break;\n        } else if (this.getNumCardsByRank(i) === 3) {\n          this.cards = this.cards.concat(cards);\n\n          for (var j = 0; j < this.wilds.length; j++) {\n            var wild = this.wilds[j];\n\n            if (wild.rank !== -1) {\n              continue;\n            }\n\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n        }\n      }\n\n      if (this.cards.length >= 6) {\n        var type = this.cards[0].toString().slice(0, -1) + '\\'s & ' + this.cards[3].toString().slice(0, -1) + '\\'s';\n        this.descr = this.name + ', ' + type;\n      }\n\n      return this.cards.length >= 6;\n    }\n\n  }\n\n  class ThreeOfAKind extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Three of a Kind', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n\n      for (var i = 0; i < this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 3) {\n          this.cards = this.values[i] || [];\n\n          for (var j = 0; j < this.wilds.length && this.cards.length < 3; j++) {\n            var wild = this.wilds[j];\n\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand - 3));\n          break;\n        }\n      }\n\n      if (this.cards.length >= 3) {\n        if (this.game.noKickers) {\n          this.cards.length = 3;\n        }\n\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + '\\'s';\n      }\n\n      return this.cards.length >= 3;\n    }\n\n  }\n\n  class ThreePair extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Three Pair', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n\n      for (var i = 0; i < this.values.length; i++) {\n        var cards = this.values[i];\n\n        if (this.cards.length > 2 && this.getNumCardsByRank(i) === 2) {\n          this.cards = this.cards.concat(cards || []);\n\n          for (var j = 0; j < this.wilds.length; j++) {\n            var wild = this.wilds[j];\n\n            if (wild.rank !== -1) {\n              continue;\n            }\n\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand - 6));\n          break;\n        } else if (this.cards.length > 0 && this.getNumCardsByRank(i) === 2) {\n          this.cards = this.cards.concat(cards || []);\n\n          for (var j = 0; j < this.wilds.length; j++) {\n            var wild = this.wilds[j];\n\n            if (wild.rank !== -1) {\n              continue;\n            }\n\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n        } else if (this.getNumCardsByRank(i) === 2) {\n          this.cards = this.cards.concat(cards);\n\n          for (var j = 0; j < this.wilds.length; j++) {\n            var wild = this.wilds[j];\n\n            if (wild.rank !== -1) {\n              continue;\n            }\n\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n        }\n      }\n\n      if (this.cards.length >= 6) {\n        var type = this.cards[0].toString().slice(0, -1) + '\\'s & ' + this.cards[2].toString().slice(0, -1) + '\\'s & ' + this.cards[4].toString().slice(0, -1) + '\\'s';\n        this.descr = this.name + ', ' + type;\n      }\n\n      return this.cards.length >= 6;\n    }\n\n  }\n\n  class TwoPair extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Two Pair', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n\n      for (var i = 0; i < this.values.length; i++) {\n        var cards = this.values[i];\n\n        if (this.cards.length > 0 && this.getNumCardsByRank(i) === 2) {\n          this.cards = this.cards.concat(cards || []);\n\n          for (var j = 0; j < this.wilds.length; j++) {\n            var wild = this.wilds[j];\n\n            if (wild.rank !== -1) {\n              continue;\n            }\n\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand - 4));\n          break;\n        } else if (this.getNumCardsByRank(i) === 2) {\n          this.cards = this.cards.concat(cards);\n\n          for (var j = 0; j < this.wilds.length; j++) {\n            var wild = this.wilds[j];\n\n            if (wild.rank !== -1) {\n              continue;\n            }\n\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n        }\n      }\n\n      if (this.cards.length >= 4) {\n        if (this.game.noKickers) {\n          this.cards.length = 4;\n        }\n\n        var type = this.cards[0].toString().slice(0, -1) + '\\'s & ' + this.cards[2].toString().slice(0, -1) + '\\'s';\n        this.descr = this.name + ', ' + type;\n      }\n\n      return this.cards.length >= 4;\n    }\n\n  }\n\n  class OnePair extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Pair', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n\n      for (var i = 0; i < this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 2) {\n          this.cards = this.cards.concat(this.values[i] || []);\n\n          for (var j = 0; j < this.wilds.length && this.cards.length < 2; j++) {\n            var wild = this.wilds[j];\n\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand - 2));\n          break;\n        }\n      }\n\n      if (this.cards.length >= 2) {\n        if (this.game.noKickers) {\n          this.cards.length = 2;\n        }\n\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + '\\'s';\n      }\n\n      return this.cards.length >= 2;\n    }\n\n  }\n\n  class HighCard extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'High Card', game, canDisqualify);\n    }\n\n    solve() {\n      this.cards = this.cardPool.slice(0, this.game.cardsInHand);\n\n      for (var i = 0; i < this.cards.length; i++) {\n        var card = this.cards[i];\n\n        if (this.cards[i].value === this.game.wildValue) {\n          this.cards[i].wildValue = 'A';\n          this.cards[i].rank = values.indexOf('A');\n        }\n      }\n\n      if (this.game.noKickers) {\n        this.cards.length = 1;\n      }\n\n      this.cards = this.cards.sort(Card.sort);\n      this.descr = this.cards[0].toString().slice(0, -1) + ' High';\n      return true;\n    }\n\n  }\n  /*\n   * Base class for handling Pai Gow Poker hands.\n   * House Way is in accordance with the MGM Grand Casino, Las Vegas NV.\n   * http://wizardofodds.com/games/pai-gow-poker/house-way/mgm/\n   * EXCEPTION: With Four of a Kind and S/F, preserve the S/F, just like Three of a Kind.\n   */\n\n\n  class PaiGowPokerHelper {\n    /*\n     * Constructor class.\n     * @param {Hand} hand Solved hand against Game 'paigowpokerfull'.\n     */\n    constructor(hand) {\n      this.baseHand = null;\n      this.hiHand = null;\n      this.loHand = null;\n      this.game = null;\n      this.loGame = new Game('paigowpokerlo');\n      this.hiGame = new Game('paigowpokerhi');\n\n      if (Array.isArray(hand)) {\n        this.baseHand = Hand.solve(hand, new Game('paigowpokerfull'));\n      } else {\n        this.baseHand = hand;\n      }\n\n      this.game = this.baseHand.game;\n    }\n    /*\n     * Set a full hand into high and low hands, according to House Way.\n     */\n\n\n    splitHouseWay() {\n      var hiCards, loCards;\n      var rank = this.game.handValues.length - this.baseHand.rank;\n      var handValue = this.game.handValues[rank];\n\n      if (handValue === FiveOfAKind) {\n        if (this.baseHand.cards[5].value === 'K' && this.baseHand.cards[6].value === 'K') {\n          loCards = this.baseHand.cards.slice(5, 7);\n          hiCards = this.baseHand.cards.slice(0, 5);\n        } else {\n          loCards = this.baseHand.cards.slice(0, 2);\n          hiCards = this.baseHand.cards.slice(2, 7);\n        }\n      } else if (handValue === FourOfAKindPairPlus) {\n        if (this.baseHand.cards[0].wildValue === 'A' && this.baseHand.cards[4].value !== 'K') {\n          hiCards = this.baseHand.cards.slice(0, 2);\n          loCards = this.baseHand.cards.slice(2, 4);\n          hiCards = hiCards.concat(this.baseHand.cards.slice(4, 7));\n        } else {\n          hiCards = this.baseHand.cards.slice(0, 4);\n          loCards = this.baseHand.cards.slice(4, 6);\n          hiCards.push(this.baseHand.cards[6]);\n        }\n      } else if (handValue === StraightFlush || handValue === Flush || handValue === Straight) {\n        var sfReturn;\n        var altGame = new Game('paigowpokeralt');\n        var altHand = Hand.solve(this.baseHand.cards, altGame);\n        var altRank = altGame.handValues.length - altHand.rank;\n\n        if (altGame.handValues[altRank] === FourOfAKind) {\n          sfReturn = this.getSFData(altHand.cards);\n          hiCards = sfReturn[0];\n          loCards = sfReturn[1];\n        } else if (altGame.handValues[altRank] === FullHouse) {\n          hiCards = altHand.cards.slice(0, 3);\n          loCards = altHand.cards.slice(3, 5);\n          hiCards = hiCards.concat(altHand.cards.slice(5, 7));\n        } else if (altGame.handValues[altRank] === ThreeOfAKind) {\n          sfReturn = this.getSFData(altHand.cards);\n          hiCards = sfReturn[0];\n          loCards = sfReturn[1];\n        } else if (altGame.handValues[altRank] === ThreePair) {\n          loCards = altHand.cards.slice(0, 2);\n          hiCards = altHand.cards.slice(2, 7);\n        } else if (altGame.handValues[altRank] === TwoPair) {\n          if (altHand.cards[0].rank < 6) {\n            if (altHand.cards[4].wildValue === 'A') {\n              hiCards = altHand.cards.slice(0, 4);\n              loCards = altHand.cards.slice(4, 6);\n              hiCards.push(altHand.cards[6]);\n            } else {\n              sfReturn = this.getSFData(altHand.cards);\n              hiCards = sfReturn[0];\n              loCards = sfReturn[1];\n            }\n          } else if (altHand.cards[0].rank < 10) {\n            if (altHand.cards[4].wildValue === 'A') {\n              hiCards = altHand.cards.slice(0, 4);\n              loCards = altHand.cards.slice(4, 6);\n              hiCards.push(altHand.cards[6]);\n            } else {\n              hiCards = altHand.cards.slice(0, 2);\n              loCards = altHand.cards.slice(2, 4);\n              hiCards = hiCards.concat(altHand.cards.slice(4, 7));\n            }\n          } else if (altHand.cards[0].wildValue !== 'A' && altHand.cards[2].rank < 6 && altHand.cards[4].wildValue === 'A') {\n            hiCards = altHand.cards.slice(0, 4);\n            loCards = altHand.cards.slice(4, 6);\n            hiCards.push(altHand.cards[6]);\n          } else {\n            hiCards = altHand.cards.slice(0, 2);\n            loCards = altHand.cards.slice(2, 4);\n            hiCards = hiCards.concat(altHand.cards.slice(4, 7));\n          }\n        } else if (altGame.handValues[altRank] === OnePair) {\n          if (altHand.cards[0].rank >= values.indexOf('T') && altHand.cards[0].rank <= values.indexOf('K') && altHand.cards[2].wildValue === 'A') {\n            var possibleSF = altHand.cards.slice(0, 2);\n            possibleSF = possibleSF.concat(altHand.cards.slice(3, 7));\n            sfReturn = this.getSFData(possibleSF);\n\n            if (sfReturn[0]) {\n              hiCards = sfReturn[0];\n              loCards = sfReturn[1];\n              loCards.push(altHand.cards[2]);\n            } else {\n              hiCards = altHand.cards.slice(0, 2);\n              loCards = altHand.cards.slice(2, 4);\n              hiCards = hiCards.concat(altHand.cards.slice(4, 7));\n            }\n          } else {\n            sfReturn = this.getSFData(altHand.cards.slice(2, 7));\n\n            if (sfReturn[0]) {\n              hiCards = sfReturn[0];\n              loCards = altHand.cards.slice(0, 2);\n            } else {\n              sfReturn = this.getSFData(altHand.cards);\n              hiCards = sfReturn[0];\n              loCards = sfReturn[1];\n            }\n          }\n        } else {\n          sfReturn = this.getSFData(altHand.cards);\n          hiCards = sfReturn[0];\n          loCards = sfReturn[1];\n        }\n      } else if (handValue === FourOfAKind) {\n        if (this.baseHand.cards[0].rank < 6) {\n          hiCards = this.baseHand.cards.slice(0, 4);\n          loCards = this.baseHand.cards.slice(4, 6);\n          hiCards.push(this.baseHand.cards[6]);\n        } else if (this.baseHand.cards[0].rank < 10 && this.baseHand.cards[4].wildValue === 'A') {\n          hiCards = this.baseHand.cards.slice(0, 4);\n          loCards = this.baseHand.cards.slice(4, 6);\n          hiCards.push(this.baseHand.cards[6]);\n        } else {\n          hiCards = this.baseHand.cards.slice(0, 2);\n          loCards = this.baseHand.cards.slice(2, 4);\n          hiCards = hiCards.concat(this.baseHand.cards.slice(4, 7));\n        }\n      } else if (handValue === TwoThreeOfAKind) {\n        loCards = this.baseHand.cards.slice(0, 2);\n        hiCards = this.baseHand.cards.slice(3, 6);\n        hiCards.push(this.baseHand.cards[2]);\n        hiCards.push(this.baseHand.cards[6]);\n      } else if (handValue === ThreeOfAKindTwoPair) {\n        hiCards = this.baseHand.cards.slice(0, 3);\n        loCards = this.baseHand.cards.slice(3, 5);\n        hiCards = hiCards.concat(this.baseHand.cards.slice(5, 7));\n      } else if (handValue === FullHouse) {\n        if (this.baseHand.cards[3].wildValue === '2' && this.baseHand.cards[5].wildValue === 'A' && this.baseHand.cards[6].wildValue === 'K') {\n          hiCards = this.baseHand.cards.slice(0, 5);\n          loCards = this.baseHand.cards.slice(5, 7);\n        } else {\n          hiCards = this.baseHand.cards.slice(0, 3);\n          loCards = this.baseHand.cards.slice(3, 5);\n          hiCards = hiCards.concat(this.baseHand.cards.slice(5, 7));\n        }\n      } else if (handValue === ThreeOfAKind) {\n        if (this.baseHand.cards[0].wildValue === 'A') {\n          hiCards = this.baseHand.cards.slice(0, 2);\n          loCards = this.baseHand.cards.slice(2, 4);\n          hiCards = hiCards.concat(this.baseHand.cards.slice(4, 7));\n        } else {\n          hiCards = this.baseHand.cards.slice(0, 3);\n          loCards = this.baseHand.cards.slice(3, 5);\n          hiCards = hiCards.concat(this.baseHand.cards.slice(5, 7));\n        }\n      } else if (handValue === ThreePair) {\n        loCards = this.baseHand.cards.slice(0, 2);\n        hiCards = this.baseHand.cards.slice(2, 7);\n      } else if (handValue === TwoPair) {\n        if (this.baseHand.cards[0].rank < 6) {\n          hiCards = this.baseHand.cards.slice(0, 4);\n          loCards = this.baseHand.cards.slice(4, 6);\n          hiCards.push(this.baseHand.cards[6]);\n        } else if (this.baseHand.cards[0].rank < 10) {\n          if (this.baseHand.cards[4].wildValue === 'A') {\n            hiCards = this.baseHand.cards.slice(0, 4);\n            loCards = this.baseHand.cards.slice(4, 6);\n            hiCards.push(this.baseHand.cards[6]);\n          } else {\n            hiCards = this.baseHand.cards.slice(0, 2);\n            loCards = this.baseHand.cards.slice(2, 4);\n            hiCards = hiCards.concat(this.baseHand.cards.slice(4, 7));\n          }\n        } else if (this.baseHand.cards[0].wildValue !== 'A' && this.baseHand.cards[2].rank < 6 && this.baseHand.cards[4].wildValue === 'A') {\n          hiCards = this.baseHand.cards.slice(0, 4);\n          loCards = this.baseHand.cards.slice(4, 6);\n          hiCards.push(this.baseHand.cards[6]);\n        } else {\n          hiCards = this.baseHand.cards.slice(0, 2);\n          loCards = this.baseHand.cards.slice(2, 4);\n          hiCards = hiCards.concat(this.baseHand.cards.slice(4, 7));\n        }\n      } else if (handValue === OnePair) {\n        hiCards = this.baseHand.cards.slice(0, 2);\n        loCards = this.baseHand.cards.slice(2, 4);\n        hiCards = hiCards.concat(this.baseHand.cards.slice(4, 7));\n      } else {\n        hiCards = [this.baseHand.cards[0]];\n        loCards = this.baseHand.cards.slice(1, 3);\n        hiCards = hiCards.concat(this.baseHand.cards.slice(3, 7));\n      }\n\n      this.hiHand = Hand.solve(hiCards, this.hiGame);\n      this.loHand = Hand.solve(loCards, this.loGame);\n    }\n    /*\n     * Determine the best possible Straight and/or Flush.\n     * @param  {Array} cards 5-7 Card objects to check.\n     * @return {Array} [hiCards, loCards] High and Low components, if any.\n     */\n\n\n    getSFData(cards) {\n      var hiCards, possibleLoCards, bestLoCards, bestHand;\n      var handsToCheck = [new StraightFlush(cards, new Game('paigowpokersf7')), new StraightFlush(cards, new Game('paigowpokersf6')), new StraightFlush(cards, this.game), new Flush(cards, new Game('paigowpokersf7')), new Flush(cards, new Game('paigowpokersf6')), new Flush(cards, this.game), new Straight(cards, new Game('paigowpokersf7')), new Straight(cards, new Game('paigowpokersf6')), new Straight(cards, this.game)];\n\n      for (var i = 0; i < handsToCheck.length; i++) {\n        var hand = handsToCheck[i];\n\n        if (hand.isPossible) {\n          if (hand.sfLength === 7) {\n            possibleLoCards = [hand.cards[0], hand.cards[1]];\n          } else if (hand.sfLength === 6) {\n            possibleLoCards = [hand.cards[0]];\n\n            if (cards.length > 6) {\n              possibleLoCards.push(hand.cards[6]);\n            }\n          } else if (cards.length > 5) {\n            possibleLoCards = [hand.cards[5]];\n\n            if (cards.length > 6) {\n              possibleLoCards.push(hand.cards[6]);\n            }\n          }\n\n          if (possibleLoCards) {\n            possibleLoCards = possibleLoCards.sort(Card.sort);\n\n            if (!bestLoCards || bestLoCards[0].rank < possibleLoCards[0].rank || bestLoCards.length > 1 && bestLoCards[0].rank === possibleLoCards[0].rank && bestLoCards[1].rank < possibleLoCards[1].rank) {\n              bestLoCards = possibleLoCards;\n              bestHand = hand;\n            }\n          } else if (!bestHand) {\n            bestHand = hand;\n            break;\n          }\n        }\n      }\n\n      if (bestHand) {\n        if (bestHand.sfLength === 7) {\n          hiCards = bestHand.cards.slice(2, 7);\n        } else if (bestHand.sfLength === 6) {\n          hiCards = bestHand.cards.slice(1, 6);\n        } else {\n          hiCards = bestHand.cards.slice(0, 5);\n        }\n      }\n\n      return [hiCards, bestLoCards];\n    }\n    /*\n     * Determine if the setting of the hands is valid. Hi must be higher than lo.\n     * @return {Boolean}\n     */\n\n\n    qualifiesValid() {\n      var compareHands = Hand.winners([this.hiHand, this.loHand]);\n      return !(compareHands.length === 1 && compareHands[0] === this.loHand);\n    }\n    /**\n     * Find which of two split hands is best, according to rules.\n     * @param  {PaiGowPokerHelper} player Player hand to evaluate. Must be set.\n     * @param  {PaiGowPokerHelper} banker Banker hand to evaluate. Must be set.\n     * @param  {int}               winner Winning party, if any.\n     *                                    Player = 1, Banker = -1, Push = 0\n     */\n\n\n    static winners(player, banker) {\n      if (!player.qualifiesValid()) {\n        if (banker.qualifiesValid()) {\n          return -1;\n        } // Probably shouldn't get here because the dealer must set house way.\n        // However, we'll still have it as a sanity check, just in case.\n\n\n        return 0;\n      }\n\n      if (!banker.qualifiesValid()) {\n        return 1;\n      }\n\n      var hiWinner = Hand.winners([player.hiHand, banker.hiHand]);\n      var loWinner = Hand.winners([player.loHand, banker.loHand]); // In Pai Gow Poker, Banker takes any equal valued hands.\n\n      if (hiWinner.length === 1 && hiWinner[0] === player.hiHand) {\n        if (loWinner.length === 1 && loWinner[0] === player.loHand) {\n          // Player wins both; player wins\n          return 1;\n        } // Player wins hi, Banker wins lo; push\n\n\n        return 0;\n      }\n\n      if (loWinner.length === 1 && loWinner[0] === player.loHand) {\n        // Banker wins hi, Player wins lo; push\n        return 0;\n      } // Banker wins both; banker wins\n\n\n      return -1;\n    }\n    /*\n     * Set a full hand into high and low hands, according to manual input.\n     * @param  {Array} hiHand       High hand to specify.\n     *                              Can also be {Hand} with game of 'paigowpokerhi'.\n     * @param  {Array} loHand       Low hand to specify.\n     *                              Can also be {Hand} with game of 'paigowpokerlo'.\n     * @return {PaiGowPokerHelper}  Object with split hands.\n     */\n\n\n    static setHands(hiHand, loHand) {\n      var fullHand = [];\n\n      if (Array.isArray(hiHand)) {\n        hiHand = Hand.solve(hiHand, new Game('paigowpokerhi'));\n      }\n\n      fullHand = fullHand.concat(hiHand.cardPool);\n\n      if (Array.isArray(loHand)) {\n        loHand = Hand.solve(loHand, new Game('paigowpokerlo'));\n      }\n\n      fullHand = fullHand.concat(loHand.cardPool);\n      var result = new PaiGowPokerHelper(fullHand);\n      result.hiHand = hiHand;\n      result.loHand = loHand;\n      return result;\n    }\n    /**\n     * Build and return PaiGowPokerHelper object with hands split House Way.\n     * @param  {Array} fullHand    Array of cards (['Ad', '3c', 'Th', ...]).\n     *                             Can also be {Hand} with game of 'paigowpokerfull'.\n     * @return {PaiGowPokerHelper} Object with split hands.\n     */\n\n\n    static solve(fullHand) {\n      var result = new PaiGowPokerHelper(fullHand = fullHand || ['']);\n      result.splitHouseWay();\n      return result;\n    }\n\n  }\n\n  var gameRules = {\n    'standard': {\n      'cardsInHand': 5,\n      'handValues': [StraightFlush, FourOfAKind, FullHouse, Flush, Straight, ThreeOfAKind, TwoPair, OnePair, HighCard],\n      'wildValue': null,\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 5,\n      'lowestQualified': null,\n      \"noKickers\": false\n    },\n    'jacksbetter': {\n      'cardsInHand': 5,\n      'handValues': [StraightFlush, FourOfAKind, FullHouse, Flush, Straight, ThreeOfAKind, TwoPair, OnePair, HighCard],\n      'wildValue': null,\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 5,\n      'lowestQualified': ['Jc', 'Jd', '4h', '3s', '2c'],\n      \"noKickers\": true\n    },\n    'joker': {\n      'cardsInHand': 5,\n      'handValues': [NaturalRoyalFlush, FiveOfAKind, WildRoyalFlush, StraightFlush, FourOfAKind, FullHouse, Flush, Straight, ThreeOfAKind, TwoPair, HighCard],\n      'wildValue': 'O',\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 5,\n      'lowestQualified': ['4c', '3d', '3h', '2s', '2c'],\n      \"noKickers\": true\n    },\n    'deuceswild': {\n      'cardsInHand': 5,\n      'handValues': [NaturalRoyalFlush, FourWilds, WildRoyalFlush, FiveOfAKind, StraightFlush, FourOfAKind, FullHouse, Flush, Straight, ThreeOfAKind, HighCard],\n      'wildValue': '2',\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 5,\n      'lowestQualified': ['5c', '4d', '3h', '3s', '3c'],\n      \"noKickers\": true\n    },\n    'threecard': {\n      'cardsInHand': 3,\n      'handValues': [StraightFlush, ThreeOfAKind, Straight, Flush, OnePair, HighCard],\n      'wildValue': null,\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 3,\n      'lowestQualified': ['Qh', '3s', '2c'],\n      \"noKickers\": false\n    },\n    'fourcard': {\n      'cardsInHand': 4,\n      'handValues': [FourOfAKind, StraightFlush, ThreeOfAKind, Flush, Straight, TwoPair, OnePair, HighCard],\n      'wildValue': null,\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 4,\n      'lowestQualified': null,\n      \"noKickers\": true\n    },\n    'fourcardbonus': {\n      'cardsInHand': 4,\n      'handValues': [FourOfAKind, StraightFlush, ThreeOfAKind, Flush, Straight, TwoPair, OnePair, HighCard],\n      'wildValue': null,\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 4,\n      'lowestQualified': ['Ac', 'Ad', '3h', '2s'],\n      \"noKickers\": true\n    },\n    'paigowpokerfull': {\n      'cardsInHand': 7,\n      'handValues': [FiveOfAKind, FourOfAKindPairPlus, StraightFlush, Flush, Straight, FourOfAKind, TwoThreeOfAKind, ThreeOfAKindTwoPair, FullHouse, ThreeOfAKind, ThreePair, TwoPair, OnePair, HighCard],\n      'wildValue': 'O',\n      'wildStatus': 0,\n      'wheelStatus': 1,\n      'sfQualify': 5,\n      'lowestQualified': null\n    },\n    'paigowpokeralt': {\n      'cardsInHand': 7,\n      'handValues': [FourOfAKind, FullHouse, ThreeOfAKind, ThreePair, TwoPair, OnePair, HighCard],\n      'wildValue': 'O',\n      'wildStatus': 0,\n      'wheelStatus': 1,\n      'sfQualify': 5,\n      'lowestQualified': null\n    },\n    'paigowpokersf6': {\n      'cardsInHand': 7,\n      'handValues': [StraightFlush, Flush, Straight],\n      'wildValue': 'O',\n      'wildStatus': 0,\n      'wheelStatus': 1,\n      'sfQualify': 6,\n      'lowestQualified': null\n    },\n    'paigowpokersf7': {\n      'cardsInHand': 7,\n      'handValues': [StraightFlush, Flush, Straight],\n      'wildValue': 'O',\n      'wildStatus': 0,\n      'wheelStatus': 1,\n      'sfQualify': 7,\n      'lowestQualified': null\n    },\n    'paigowpokerhi': {\n      'cardsInHand': 5,\n      'handValues': [FiveOfAKind, StraightFlush, FourOfAKind, FullHouse, Flush, Straight, ThreeOfAKind, TwoPair, OnePair, HighCard],\n      'wildValue': 'O',\n      'wildStatus': 0,\n      'wheelStatus': 1,\n      'sfQualify': 5,\n      'lowestQualified': null\n    },\n    'paigowpokerlo': {\n      'cardsInHand': 2,\n      'handValues': [OnePair, HighCard],\n      'wildValue': 'O',\n      'wildStatus': 0,\n      'wheelStatus': 1,\n      'sfQualify': 5,\n      'lowestQualified': null\n    }\n  };\n  /**\n   * Base Game class that defines the rules of the game.\n   */\n\n  class Game {\n    constructor(descr) {\n      this.descr = descr;\n      this.cardsInHand = 0;\n      this.handValues = [];\n      this.wildValue = null;\n      this.wildStatus = 0;\n      this.wheelStatus = 0;\n      this.sfQualify = 5;\n      this.lowestQualified = null;\n      this.noKickers = null; // Set values based on the game rules.\n\n      if (!this.descr || !gameRules[this.descr]) {\n        this.descr = 'standard';\n      }\n\n      this.cardsInHand = gameRules[this.descr]['cardsInHand'];\n      this.handValues = gameRules[this.descr]['handValues'];\n      this.wildValue = gameRules[this.descr]['wildValue'];\n      this.wildStatus = gameRules[this.descr]['wildStatus'];\n      this.wheelStatus = gameRules[this.descr]['wheelStatus'];\n      this.sfQualify = gameRules[this.descr]['sfQualify'];\n      this.lowestQualified = gameRules[this.descr]['lowestQualified'];\n      this.noKickers = gameRules[this.descr]['noKickers'];\n    }\n\n  }\n\n  function exportToGlobal(global) {\n    global.Card = Card;\n    global.Hand = Hand;\n    global.Game = Game;\n    global.RoyalFlush = RoyalFlush;\n    global.NaturalRoyalFlush = NaturalRoyalFlush;\n    global.WildRoyalFlush = WildRoyalFlush;\n    global.FiveOfAKind = FiveOfAKind;\n    global.StraightFlush = StraightFlush;\n    global.FourOfAKindPairPlus = FourOfAKindPairPlus;\n    global.FourOfAKind = FourOfAKind;\n    global.FourWilds = FourWilds;\n    global.TwoThreeOfAKind = TwoThreeOfAKind;\n    global.ThreeOfAKindTwoPair = ThreeOfAKindTwoPair;\n    global.FullHouse = FullHouse;\n    global.Flush = Flush;\n    global.Straight = Straight;\n    global.ThreeOfAKind = ThreeOfAKind;\n    global.ThreePair = ThreePair;\n    global.TwoPair = TwoPair;\n    global.OnePair = OnePair;\n    global.HighCard = HighCard;\n    global.PaiGowPokerHelper = PaiGowPokerHelper;\n  } // Export the classes for node.js use.\n\n\n  if (typeof exports !== 'undefined') {\n    exportToGlobal(exports);\n  } // Add the classes to the window for browser use.\n\n\n  if (typeof window !== 'undefined') {\n    exportToGlobal(window);\n  }\n})();","\n\nexport default class Check {\n    preflopCheck() {\n        if (window.betRound === 0 && window.players[0].currentBet === window.players[1].currentBet) {\n            // window.betRound += 1;\n            window.turnCount += 1;\n            let first = window.players[0];\n            window.players.shift();\n            window.players.push(first);\n        } \n    }\n\n    postflopCheck() {\n        if (window.flopCount === 0 && window.betRound === 1 && window.players[0].currentBet === window.players[0].currentBet) {\n            let first = window.players[0];\n            window.players.shift();\n            window.players.push(first);\n            window.flopCount += 1;\n            \n        } else if (window.flopCount === 1 && window.betRound === 1 && window.players[0].currentBet === window.players[1].currentBet) {\n            let first = window.players[0];\n            window.players.shift();\n            window.players.push(first);\n            window.turnCount += 1;\n            window.betRound += 1;\n            window.flopCount += 1;\n            window.turnBetCount = 1;\n            \n        }\n    }\n\n    postTurnCheck() {\n        if (window.betRound === 3 && window.turnBetCount === 0 && window.players[0].currentBet === window.players[1].currentBet) {\n            let first = window.players[0];\n            window.players.shift();\n            window.players.push(first);\n            window.turnBetCount += 1;\n            \n        } else if (window.betRound === 3 && window.turnBetCount === 1 && window.players[0].currentBet === window.players[0].currentBet) {\n            let first = window.players[0];\n            window.players.shift();\n            window.players.push(first);\n            window.turnCount += 1;\n            \n        }\n    }\n\n    postRiverCheck() {\n        if (window.betRound === 4 && window.riverBetCount === 0 && window.players[0].currentBet === window.players[1].currentBet) {\n            let first = window.players[0];\n            window.players.shift();\n            window.players.push(first);\n            window.riverBetCount += 1;\n            \n        } else if (window.betRound === 4 && window.riverBetCount === 1 && window.players[0].currentBet === window.players[1].currentBet) {\n            let first = window.players[0];\n            window.players.shift();\n            window.players.push(first);\n            window.betRound += 1;\n        }\n    }\n\n}","export default class NextCard {\n\n    constructor() {\n        window.middleCards = [];\n    }\n\n    postFlop() {\n        if (window.turnCount === 1 && window.player1.currentBet === window.player2.currentBet) {\n            \n            let c = window.deck.cards.slice(0,3);\n            window.middleCards = window.middleCards.concat(c);\n        \n            for (let i = 0; i < window.players.length; i++) {\n                window.players[i].cardPool.push(window.deck.cards[0])\n                window.players[i].cardPool.push(window.deck.cards[1])\n                window.players[i].cardPool.push(window.deck.cards[2])\n            }\n\n            window.deck.cards = window.deck.cards.slice(3);\n            window.betRound += 1;\n            window.turnCount += 1;\n            window.styledCards = [];\n            let card;\n\n            for (let i = 0; i < window.middleCards.length; i++) {\n                if (window.middleCards[i][1] === 'd') {\n                    card = window.middleCards[i];\n                    card = card[0] + '🔹';\n                    // card.style.color = \"blue\"\n                    window.styledCards.push(card);\n                } else if (window.middleCards[i][1] === 's') {\n                    card = window.middleCards[i];\n                    card = card[0] + '♠️';\n                    // card.style.color = \"black\"\n                    window.styledCards.push(card);\n                } else if (window.middleCards[i][1] === 'h') {\n                    card = window.middleCards[i];\n                    card = card[0] + '❤️';\n                    // card.style.color = \"red\"\n                    window.styledCards.push(card);\n                } else if (window.middleCards[i][1] === 'c') {\n                    card = window.middleCards[i];\n                    card = card[0] + '🍀';\n                    // card.style.color = \"green\"\n                    window.styledCards.push(card);\n                }\n            }\n            window.player1.currentBet = 0;\n            window.player2.currentBet = 0;\n            d3.select(\"#flopcard-anchor\").selectAll(\"p\")\n                .data(window.styledCards)\n                .enter()\n                .append(\"p\")\n                .text(function (d) { return d })\n                .attr(\"class\", \"flopcards\")\n        }\n    }\n\n    postTurn() {\n        if (window.betRound === 2 && window.players[0].currentBet === window.players[1].currentBet && window.turnCount === 3) {\n            let card = window.deck.cards[0];\n            let c = card;\n\n            if (card[1] === 'd') {\n                card = card[0] + '🔹';\n                window.styledCards.push(card);\n            } else if (card[1] === 's') {\n                card = card[0] + '♠️';\n                window.styledCards.push(card);\n            } else if (card[1] === 'h') {\n                card = card[0] + '❤️';\n                window.styledCards.push(card);\n            } else if (card[1] === 'c') {\n                card = card[0] + '🍀';\n                window.styledCards.push(card);\n            }\n            window.middleCards[3] = c;\n            for (let i = 0; i < window.players.length; i++) {\n                window.players[i].cardPool.push(c)\n            }\n            d3.select(\"#flopcard-anchor\").selectAll(\"p\")\n                .data(window.styledCards)\n                .enter()\n                .append(\"p\")\n                .text(function (d) { return d })\n                .attr(\"class\", \"flopcards\")\n\n            window.player1.currentBet = 0;\n            window.player2.currentBet = 0;\n            window.betRound += 1;\n            window.deck.cards.slice(1);\n            window.flopCount = 0;\n            window.turnBetCount = 0;\n        }\n    }\n\n    postRiver() {\n        if (window.betRound === 3 && window.players[0].currentBet === window.players[1].currentBet && window.turnCount === 4) {\n            \n            // window.deck.cards.slice(1);\n            let c = window.deck.cards[1];\n            let card = window.deck.cards[1];\n            window.middleCards[4] = c;\n\n            if (card[1] === 'd') {\n                card = card[0] + '🔹';\n                window.styledCards.push(card);\n            } else if (card[1] === 's') {\n                card = card[0] + '♠️';\n                window.styledCards.push(card);\n            } else if (card[1] === 'h') {\n                card = card[0] + '❤️';\n                window.styledCards.push(card);\n            } else if (card[1] === 'c') {\n                card = card[0] + '☘️';\n                window.styledCards.push(card);\n            }\n\n            for (let i = 0; i < window.players.length; i++) {\n                window.players[i].cardPool.push(c)\n            }\n\n            d3.select(\"#flopcard-anchor\").selectAll(\"p\")\n                .data(window.styledCards)\n                .enter()\n                .append(\"p\")\n                .text(function (d) { return d })\n                .attr(\"class\", \"flopcards\")\n\n            window.betRound += 1;\n        }\n    }\n}","export default class Raise {\n    preflopTwoTimesRaise() {\n        if (window.betRound === 0){\n            if (window.players[0] === window.player1) {\n                window.player1.chips -= window.player2.currentBet * 2 - window.player1.currentBet;\n                window.pot.chips += window.player2.currentBet * 2 - window.player1.currentBet;\n                window.player1.currentBet = window.player2.currentBet * 2;\n                window.player1.deadmoney += window.player2.currentBet * 2 - window.player1.deadmoney;\n                let first = window.players[0];\n                window.players.shift();\n                window.players.push(first);\n            } else if (window.players[0] === window.player2) {\n                window.player2.chips -= window.player1.currentBet * 2 - window.player2.currentBet;\n                window.pot.chips += window.player1.currentBet * 2 - window.player2.currentBet;\n                window.player2.currentBet = window.player1.currentBet * 2;\n                window.player2.deadmoney += window.player1.currentBet * 2 - window.player2.deadmoney;\n                let first = window.players[0];\n                window.players.shift();\n                window.players.push(first);\n            }\n        \n        window.firstBet += 1;\n        }\n    }\n\n    postflopRaise() {\n        if (window.betRound === 1 && window.players[1].currentBet === 0) {\n            window.players[0].chips -= 10;\n            window.pot.chips += 10;\n            window.players[0].deadmoney += 10;\n            window.players[0].currentBet = 10;\n            let first = window.players[0];\n            window.players.shift();\n            window.players.push(first);\n        } else if (window.betRound === 1 && window.players[1].currentBet > 0) {\n            window.players[0].chips -= window.players[1].currentBet * 2 - window.players[0].currentBet;\n            window.pot.chips += window.players[1].currentBet * 2 - window.players[0].currentBet;\n            window.players[0].deadmoney += window.players[1].currentBet * 2 - window.players[0].currentBet;\n            window.players[0].currentBet = window.players[1].currentBet * 2;\n            let first = window.players[0];\n            window.players.shift();\n            window.players.push(first);\n        }\n    }\n\n    postTurnRaise() {\n        if (window.betRound === 3 && window.players[1].currentBet === 0) {\n            window.players[0].chips -= 10;\n            window.pot.chips += 10;\n            window.players[0].deadmoney += 10;\n            window.players[0].currentBet = 10;\n            let first = window.players[0];\n            window.players.shift();\n            window.players.push(first);\n            window.turnBetCount += 1;\n        } else if (window.betRound === 3 && window.players[1].currentBet > 0) {\n            window.players[0].chips -= window.players[1].currentBet * 2 - window.players[0].currentBet;\n            window.pot.chips += window.players[1].currentBet * 2 - window.players[0].currentBet;\n            window.players[0].deadmoney += window.players[1].currentBet * 2 - window.players[0].currentBet;\n            window.players[0].currentBet = window.players[1].currentBet * 2;\n            let first = window.players[0];\n            window.players.shift();\n            window.players.push(first);\n        }\n    }\n\n    postRiverRaise() {\n        if (window.betRound === 4 && window.players[1].currentBet === 0) {\n            window.players[0].chips -= 10;\n            window.pot.chips += 10;\n            window.players[0].deadmoney += 10;\n            window.players[0].currentBet = 10;\n            let first = window.players[0];\n            window.players.shift();\n            window.players.push(first);\n        } else if (window.betRound === 4 && window.players[1].currentBet > 0) {\n            window.players[0].chips -= window.players[1].currentBet * 2 - window.players[0].currentBet;\n            window.pot.chips += window.players[1].currentBet * 2 - window.players[0].currentBet;\n            window.players[0].deadmoney += window.players[1].currentBet * 2 - window.players[0].currentBet;\n            window.players[0].currentBet = window.players[1].currentBet * 2;\n            let first = window.players[0];\n            window.players.shift();\n            window.players.push(first);\n        }\n    }\n}","export default class SolveHand {\n    solveHands() {\n        var Hand = require(\"pokersolver\").Hand;\n        let playerHands = [];\n        \n\n        if (window.betRound === 5 || window.players.length === 2) {\n            let rez1 = Hand.solve(window.player1.cardPool);\n            playerHands.push(rez1);\n            let rez2 = Hand.solve(window.player2.cardPool);\n            playerHands.push(rez2);\n\n            window.winner = Hand.winners(playerHands);\n            this.setCardPool();\n            this.returnWinner();\n            let first = window.players[0];\n            window.players.shift();\n            window.players.push(first);\n\n            let player2cards = [];\n            let card1;\n            let card2;\n            let card;\n            for (let i = 0; i < 2; i++) {\n                card1 = window.player2.holecards[i];\n                \n                if (card1[1] === 'd') {\n                    card = card1[0] + '🔹'\n                    player2cards.push(card)\n                } else if (card1[1] === 's') {\n                    card = card1[0] + '♠️'\n                    player2cards.push(card)\n                } else if (card1[1] === 'h') {\n                    card = card1[0] + '❤️'\n                    player2cards.push(card)\n                } else if (card1[1] === 'c') {\n                    card = card1[0] + '🍀'\n                    player2cards.push(card)\n                }\n            }\n            window.dealCount = 0;\n            window.betRound = 0;\n            window.count = 0;\n            window.firstBet = 0;\n            window.turnCount = 0;\n            window.flopCount = 0;\n            window.turnBetCount = 0;\n            window.riverBetCount = 0;\n            window.middleCards = [];\n            window.styledCards = [];\n            window.player1.holecards = [];\n            window.player2.holecards = [];\n            window.player1.cardPool = [];\n            window.player2.cardPool = [];\n            window.deck.cards = [];\n            \n\n\n\n            d3.selectAll(\".player2cards\").remove();\n            d3.select(\"player2carddiv\").selectAll(\"p\")\n            .data(player2cards)\n            .enter()\n            .append('p')\n            .text(function (d) { return d})\n            .attr(\"class\", 'player2cardsrez')\n\n            d3.select(\"#pokertable\").selectAll('h3')\n                .data(window.winningPlayerName)\n                .enter()\n                .append(\"h3\")\n                .text(function (d) { return d + \" wins pot with \" + window.winner[0].descr })\n                .attr(\"class\", \"winnerName\")\n\n\n        }\n\n    }\n\n    resetHand() {\n        if (window.players.length === 1) {\n            d3.selectAll(\".player2cards\").remove();\n            window.dealCount = 0;\n            window.betRound = 0;\n            window.count = 0;\n            window.firstBet = 0;\n            window.turnCount = 0;\n            window.flopCount = 0;\n            window.turnBetCount = 0;\n            window.riverBetCount = 0;\n            window.middleCards = [];\n            window.styledCards = [];\n            window.player1.holecards = [];\n            window.player2.holecards = [];\n            window.player1.cardPool = [];\n            window.player2.cardPool = [];\n            window.deck.cards = [];\n            window.players[0].chips += window.pot.chips;\n            window.pot.chips = 0;\n        }\n    }\n\n    setCardPool() {\n        window.winningHand = [];\n        let val;\n        let suit;\n        let card;\n        for (let i = 0; i < 7; i++) {\n            val = window.winner[0].cardPool[i].value;\n            suit = window.winner[0].cardPool[i].suit;\n            card = val.concat(suit)\n            window.winningHand.push(card)\n        }\n\n        window.winningHand = window.winningHand.sort();\n        // console.log(window.winningHand)\n    }\n\n    returnWinner() {\n        for (let i = 0; i < players.length; i++) {\n            if (JSON.stringify(window.players[i].cardPool.sort()) === JSON.stringify(window.winningHand)) {\n                console.log(window.players[i].name)\n                window.players[i].chips += window.pot.chips;\n                window.pot.chips = 0;\n                window.winningPlayerName = [window.players[i].name];\n            }\n        }\n\n    }\n}","export default class Fold {\n    // resetVariables() {\n    //     window.dealCount = 0;\n    //     window.betRound = 0;\n    //     window.count = 0;\n    //     window.firstBet = 0;\n    //     window.turnCount = 0;\n    //     window.flopCount = 0;\n    //     window.turnBetCount = 0;\n    //     window.riverBetCount = 0;\n    //     window.middleCards = [];\n    //     window.styledCards = [];\n    //     window.player1.holecards = [];\n    //     window.player2.holecards = [];\n    //     window.player1.cardPool = [];\n    //     window.player2.cardPool = [];\n    //     window.deck.cards = [];\n    //     let first = window.players[0];\n    //     window.players.shift();\n    //     window.players.push(first);\n    //     window.players[0].chips += window.pot.chips;\n    //     window.pot.chips = 0;\n    // }\n}","import Deck from './deck';\nimport Preflop from './preflop';\nimport Call from './calling';\nimport Check from './check';\nimport NextCard from './nextcard';\nimport Raise from './raise';\nimport SolveHand from './result';\nimport Fold from './fold';\n\nconst deck = require('./deck')\nconst cards = require('./preflop');\nconst call = require('./calling');\n\nexport default class Game {\n    constructor() {\n        this.deck = new Deck();\n        this.cards = new Preflop();\n        this.calling = new Call();\n        this.checking = new Check();\n        this.nextCard = new NextCard();\n        this.raising = new Raise();\n        this.solve = new SolveHand();\n        this.folding = new Fold();\n    }\n\n    createGame() {\n        this.cards.startScoreboard();\n    }\n\n    call() {\n        this.calling.preflopCallFive();\n        this.calling.preflopCall();\n        this.calling.postflopCall();\n        this.calling.postTurnCall();\n        this.calling.postRiverCall();\n        this.nextCard.postFlop();\n        this.nextCard.postTurn();\n        this.nextCard.postRiver();\n        this.solve.solveHands();\n        this.cards.startScoreboard();\n    }\n\n    check() {\n        this.checking.preflopCheck();\n        this.checking.postflopCheck();\n        this.checking.postTurnCheck();\n        this.checking.postRiverCheck();\n        this.nextCard.postFlop();\n        this.nextCard.postTurn();\n        this.nextCard.postRiver();\n        this.solve.solveHands();\n    }\n\n    raiseTwoTimes() {\n        this.raising.preflopTwoTimesRaise();\n        this.raising.postflopRaise();\n        this.raising.postTurnRaise();\n        this.raising.postRiverRaise();\n        this.cards.startScoreboard();\n    }\n\n    fold() {\n        let first = window.players[0];\n        window.players.shift()\n        this.solve.resetHand();\n        this.solve.solveHands();\n        window.players.push(first)\n        this.cards.startScoreboard();\n    }\n}","import Deck from '../javascript/js/deck'\nimport Cards from '../javascript/js-new/preflop';\nimport Game from '../javascript/js-new/game';\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    const deal = new Cards();\n    const game = new Game();\n    game.createGame();\n\n    window.turnCount = 0;\n    window.flopCount = 0;\n    window.turnBetCount = 0;\n    window.riverBetCount = 0;\n    let playerShift = 0;\n    // document.getElementById('currBet').innerHTML = \"current Bet:\" + window.player1.currentBet;\n\n    document.getElementById('player2chips').innerHTML = window.player2.chips;\n    document.getElementById('player1chips').innerHTML = window.player1.chips;\n\n    document.getElementById('hands').onclick = function dealTheCards() {\n        const players = [window.player1, window.player2];\n        \n        d3.selectAll(\".player1cards\").remove();\n        d3.selectAll(\".player2cardsrez\").remove();\n        d3.selectAll(\".flopcards\").remove();\n        d3.selectAll(\".winnerName\").remove();\n        \n        let first;\n        for (let i = 0; i < playerShift; i++) {\n            first = players[0];\n            players.shift(1);\n            players.push(first)\n        }\n        window.players = players\n        playerShift += 1;\n        \n        for (let i = 0; i < window.players.length; i++) {\n            window.players[i].cardPool = [];\n            window.players[i].holecards = [];\n            window.players[i].currentBet = 0;\n            window.players[i].deadmoney = 0;\n        }\n        \n        \n        deal.dealCards();\n\n        \n\n        document.getElementById('player2chips').innerHTML = window.player2.chips;\n        document.getElementById('player1chips').innerHTML = window.player1.chips;\n    }\n\n    document.getElementById('call').onclick = function callBet() {\n        game.call();\n        document.getElementById('player2chips').innerHTML = window.player2.chips;\n        document.getElementById('player1chips').innerHTML = window.player1.chips;\n    }\n\n    document.getElementById('check').onclick = function checkTurn() {\n        game.check();\n    }\n\n    document.getElementById('raise2x').onclick = function raiseTwox() {\n        game.raiseTwoTimes();\n        if (window.players[1].currentBet === 0) {\n            document.getElementById('raise2x').innerHTML = \"Raise to 20\"\n        } else {\n            document.getElementById('raise2x').innerHTML = 'Raise to ' + window.players[1].currentBet * 2; \n        }\n        document.getElementById('player2chips').innerHTML = window.player2.chips;\n        document.getElementById('player1chips').innerHTML = window.player1.chips;\n    }\n\n    document.getElementById('fold').onclick = function foldCards() {\n        d3.selectAll(\".player1cards\").remove();\n        d3.selectAll('.player2cards').remove();\n        game.fold();\n        \n        // d3.selectAll(\".player2cardsrez\").remove();\n    }\n\n})"],"sourceRoot":""}