{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./javascript/src/index.js","webpack:///./javascript/src/js/cards.js","webpack:///./javascript/src/js/player_chips.js","webpack:///./javascript/src/js/scoreboard.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AAAA;AACyC;AACV;AACY;;AAE3C;AACA;;AAEA;;AAEA;;AAEA,mEAAmE,KAAK;;AAExE;AACA;AACA;AACA;AACA,IAAI,8DAAU;AACd,IAAI,gDAAK;AACT,IAAI,gEAAW;AACf,CAAC,C;;;;;;;;;;;ACrBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,yBAAyB,mBAAmB;AAC5C,6BAA6B,kBAAkB;AAC/C;AACA;AACA;AACA;AACA;AACA,oCAAoC,OAAO;AAC3C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qCAAqC,iCAAiC,EAAE;AACxE;;;AAGA;AACA,6BAA6B,OAAO;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,SAAS;AAC3C;;AAEA;AACA;AACA;AACA;AACA,kCAAkC,SAAS;AAC3C;;AAEA;AACA;AACA;AACA;AACA,kCAAkC,SAAS;AAC3C;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,eAAe;AACf;AACA;AACA;AACA;;;;;;;AAOA;;AAEA,IAAI;;;;;;;;;;;;;ACxJJ;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACe,0EAAW,E;;;;;;;;;;;;;;;AC5C1B;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,4BAA4B,iCAAiC,EAAE;AAC/D;;AAEA,sBAAsB,mBAAmB;AACzC,0BAA0B,kBAAkB;AAC5C;AACA;AACA;AACA;AACA;AACA,iCAAiC,OAAO;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,mBAAmB;AAC9C,+BAA+B,kBAAkB;AACjD;AACA;AACA;AACA;AACA;AACA,sCAAsC,OAAO;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oCAAoC,WAAW;AAC/C;;AAEA;AACA;AACA;AACA;AACA,oCAAoC,WAAW;AAC/C;;AAEA;AACA;AACA;AACA;AACA,oCAAoC,WAAW;AAC/C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,oBAAoB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oCAAoC,iCAAiC,EAAE;AACvE;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wCAAwC,WAAW;AACnD;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA,gCAAgC,iCAAiC,EAAE;AACnE;;AAEA,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oCAAoC,SAAS;AAC7C;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,oCAAoC,iCAAiC,EAAE;AACvE;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,YAAY;AACzC;AACA;AACA;AACA;AACA,gCAAgC,kCAAkC;AAClE;AACA;;AAEA;AACA,K;AACA;AACe,yEAAU,EAAC","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./javascript/src/index.js\");\n","// const axios = require('axios');\nimport scoreboard from './js/scoreboard';\nimport cards from './js/cards';\nimport playerChips from './js/player_chips'\n\n// const express = require(\"express\");\n// const app = express();\n\n// app.get(\"/\", (req, res) => res.send(\"Hello World\"));\n\n// const port = process.env.PORT || 5000;\n\n// app.listen(port, () => console.log(`Server is running on port ${port}`));\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    // var canvas = document.getElementById(\"myCanvas\");\n    // var ctx = canvas.getContext(\"2d\");\n    console.log(\"this is working\")\n    scoreboard();\n    cards();\n    playerChips();\n})","// document.addEventListener(\"DOMContentLoaded\", () => {\n//     var canvas = document.getElementById(\"myCanvas\");\n//     var ctx = canvas.getContext(\"2d\");\n//     ctx.beginPath();\n//     ctx.arc(240, 160, 20, 0, Math.PI * 2, false);\n//     ctx.fillStyle = \"green\";\n//     ctx.fill();\n//     ctx.closePath();\n//     // const values = ['2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A'];\n//     // const suits = ['s', 'c', 'h', 'd'];\n//     // let cards = [];\n//     // let player1 = {\n//     //     name: 'Me',\n//     //     stack: 100,\n//     //     cardPool: [],\n//     //     holecards: [],\n//     //     status: 'live'\n//     // }\n//     // let player2 = {\n//     //     name: 'Tom Dwan',\n//     //     stack: 100,\n//     //     cardPool: [],\n//     //     holecards: [],\n//     //     status: 'live'\n//     // }\n//     // let player3 = {\n//     //     name: 'Phil Ivey',\n//     //     stack: 100,\n//     //     cardPool: [],\n//     //     holecards: [],\n//     //     status: 'live'\n//     // }\n    \n    \n//     // for (let i = 0; i < values.length; i++) {\n//     //     for (let j = 0; j < suits.length; j++) {\n//     //         let ele = values[i].concat(suits[j]);\n//     //         cards.push(ele);\n//     //     }\n//     // }\n//     // var i, j, temp;\n//     // for (i = cards.length - 1; i > 0; i--) {\n//     //     j = Math.floor(Math.random() * (i + 1));\n//     //     temp = cards[i];\n//     //     cards[i] = cards[j];\n//     //     cards[j] = temp;\n//     // };\n\n//     // // d3.select(\"#chipcount\").selectAll(\"p\")\n//     // //     .data(theData)\n//     // //     .enter()\n//     // //     .append(\"p\")\n//     // //     .text(function (d) { return d.name + \" : \" + d.chips; })\n//     // //     .attr(\"class\", \"playernames\");\n\n\n//     // document.getElementById('hands').onclick = function dealCards() {\n//     //     for (let i = 0; i < 2; i++) {\n//     //         player1.holecards.push(cards[0]);\n//     //         player1.cardPool.push(cards[0]);\n//     //         cards.shift()\n//     //         player2.holecards.push(cards[0]);\n//     //         player2.cardPool.push(cards[0]);\n//     //         cards.shift()\n//     //         player3.holecards.push(cards[0]);\n//     //         player3.cardPool.push(cards[0]);\n//     //         cards.shift()\n//     //     }\n//     //     let arr = [player1.holecards, player2.holecards, player3.holecards];\n//     //     // console.log(arr)\n//     //     // hands.innerHTML = arr;\n//     //     d3.select(\"#player1carddiv\").selectAll(\"p\")\n//     //     .data(player1.holecards)\n//     //     .enter()\n//     //     .append('p')\n//     //     .text(function (d) {return d})\n//     //     .attr(\"class\", 'player1cards')\n        \n//     //     d3.select(\"#player2carddiv\").selectAll(\"p\")\n//     //     .data(player2.holecards)\n//     //     .enter()\n//     //     .append('p')\n//     //     .text(function (d) {return d})\n//     //     .attr(\"class\", 'player2cards')\n        \n//     //     d3.select(\"#player3carddiv\").selectAll(\"p\")\n//     //     .data(player3.holecards)\n//     //     .enter()\n//     //     .append('p')\n//     //     .text(function (d) {return d})\n//     //     .attr(\"class\", 'player3cards')\n//     //     // debugger\n\n\n        \n//     // }\n//     // let middlecards = [];\n\n//     // document.getElementById('flop').onclick = function flopCards() {\n//     //     c = cards.slice(0,3)\n//     //     middlecards = middlecards.concat(c);\n//     //     player1.cardPool = player1.cardPool.concat(middlecards)\n//     //     player2.cardPool = player2.cardPool.concat(middlecards)\n//     //     player3.cardPool = player3.cardPool.concat(middlecards)\n//     //     flop.innerHTML = middlecards;\n//     //     cards = cards.slice(3,46)\n//     // }\n\n\n\n//     // document.getElementById('turn').onclick = function turnCard() {\n//     //     middlecards.push(cards[0]);\n//     //     player1.cardPool.push(middlecards[3]);\n//     //     player2.cardPool.push(middlecards[3]);\n//     //     player3.cardPool.push(middlecards[3]);\n//     //     turn.innerHTML = player1.cardPool[5];\n//     //     cards.shift();\n//     // }\n\n//     // document.getElementById('river').onclick = function riverCard() {\n//     //     middlecards.push(cards[0]);\n//     //     player1.cardPool.push(middlecards[4]);\n//     //     player2.cardPool.push(middlecards[4]);\n//     //     player3.cardPool.push(middlecards[4]);\n//     //     river.innerHTML = player1.cardPool[6];\n//     //     cards.shift();\n//     // }\n\n//     // document.getElementById('solve').onclick = function winningHand() {\n//     //     let hand1 = Hand.solve(player1.cardPool);\n//     //     let hand2 = Hand.solve(player2.cardPool);\n//     //     let hand3 = Hand.solve(player3.cardPool);\n//     //     let hands = [hand1, hand2, hand3];\n//     //     let winner = Hand.winners(hands);\n//     //     let champ;\n//     //     if (hand1.cardPool === winner[0].cardPool) {\n//     //         champ = player1\n//     //     } else if (hand2.cardPool === winner[0].cardPool) {\n//     //         champ = player2\n//     //     } else {\n//     //         champ = player3\n//     //     }\n//     //     solve.innerHTML = champ.name;\n//     // }\n\n\n\n    \n    \n\n// // // playerCards.append(hands)\n    \n// })\n","const playerChips = () => {\n        var canvas = document.getElementById(\"myCanvas\");\n        var ctx = canvas.getContext(\"2d\");\n        var x = canvas.width / 2;\n        var y = canvas.height - 30;\n        var x1 = canvas.width / 2;\n        var y1 = canvas.height - 30;\n        // debugger\n        var dx = 2;\n        var dy = -10;\n        ctx.beginPath();\n        ctx.arc(x, y, 10, 0, Math.PI * 2);\n        ctx.fillStyle = \"tomato\";\n        ctx.fill();\n        ctx.closePath();\n        ctx.strokeStyle = \"black\";\n        ctx.stroke();\n\n\n    // function draw() {\n    //     ctx.clearRect(0, 0, canvas.width, canvas.height);\n    //     ctx.beginPath();\n    //     ctx.arc(x, y, 10, 0, Math.PI * 2);\n    //     ctx.fillStyle = \"#0095DD\";\n    //     ctx.fill();\n    //     ctx.closePath();\n    //     x += dx;\n    //     y += dy;\n    // }\n\n        // document.getElementById(\"betbutton\").onclick = function moveChips() {\n        //     ctx.clearRect(0, 0, canvas.width, canvas.height);\n        //     ctx.beginPath();\n        //     ctx.arc(x1, y1, 10, 0, Math.PI * 2);\n        //     ctx.fillStyle = \"tomato\";\n        //     ctx.fill();\n        //     ctx.closePath();\n        //     ctx.strokeStyle = \"black\";\n        //     ctx.stroke();\n        //     x1 += dx;\n        //     y1 += dy;\n        //     debugger\n        // }\n\n\n    }\nexport default playerChips;","\n\nconst scoreboard = () => {\n    var pot = {name: 'Pot', chips: 0}\n    let middlecards = [];\n    let c;\n    const values = ['2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A'];\n    const suits = ['s', 'c', 'h', 'd'];\n    var canvas = document.getElementById(\"myCanvas\");\n    var ctx = canvas.getContext(\"2d\");\n    var x1 = canvas.width / 2;\n    var y1 = canvas.height - 30;\n    var dx = 2;\n    var dy = -10;\n    let cards = [];\n    let player1 = {\n        name: 'Me',\n        chips: 100,\n        cardPool: [],\n        holecards: [],\n        status: 'live'\n    }\n    let player2 = {\n        name: 'Tom Dwan',\n        chips: 100,\n        cardPool: [],\n        holecards: [],\n        status: 'live'\n    }\n    let player3 = {\n        name: 'Phil Ivey',\n        chips: 100,\n        cardPool: [],\n        holecards: [],\n        status: 'live'\n    }\n    var theData = [player1, player2, player3, pot];\n    let players = [player1, player2, player3]\n\n    d3.select(\"#chipcount\").selectAll(\"p\")\n        .data(theData)\n        .enter()\n        .append(\"p\")\n        .text(function (d) { return d.name + \" : \" + d.chips; })\n        .attr(\"class\", \"playernames\");\n\n    // for (let i = 0; i < values.length; i++) {\n    //     for (let j = 0; j < suits.length; j++) {\n    //         let ele = values[i].concat(suits[j]);\n    //         cards.push(ele);\n    //     }\n    // }\n    // var i, j, temp;\n    // for (i = cards.length - 1; i > 0; i--) {\n    //     j = Math.floor(Math.random() * (i + 1));\n    //     temp = cards[i];\n    //     cards[i] = cards[j];\n    //     cards[j] = temp;\n    // };\n    let turn = 0;\n    let betTurn = 0\n    let dealTurn = 0;\n    document.getElementById('hands').onclick = function dealCards() {\n        // if (dealTurn === 0) {\n            // const values = ['2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A'];\n            // const suits = ['s', 'c', 'h', 'd'];\n            // let cards = [];\n            cards = [];\n\n            for (let i = 0; i < values.length; i++) {\n                for (let j = 0; j < suits.length; j++) {\n                    let ele = values[i].concat(suits[j]);\n                    cards.push(ele);\n                }\n            }\n            var i, j, temp;\n            for (i = cards.length - 1; i > 0; i--) {\n                j = Math.floor(Math.random() * (i + 1));\n                temp = cards[i];\n                cards[i] = cards[j];\n                cards[j] = temp;\n            };\n        if (dealTurn === 0) {\n            dealTurn += 1\n            for (let i = 0; i < 2; i++) {\n                player1.holecards.push(cards[0]);\n                player1.cardPool.push(cards[0]);\n                cards.shift()\n                player2.holecards.push(cards[0]);\n                player2.cardPool.push(cards[0]);\n                cards.shift()\n                player3.holecards.push(cards[0]);\n                player3.cardPool.push(cards[0]);\n                cards.shift()\n            }\n            // let arr = [player1.holecards, player2.holecards, player3.holecards];\n\n            d3.select(\"#player1carddiv\").selectAll(\"p\")\n                .data(player1.holecards)\n                .enter()\n                .append('p')\n                .text(function (d) { return d })\n                .attr(\"class\", 'player1cards')\n\n            d3.select(\"#player2carddiv\").selectAll(\"p\")\n                .data(player2.holecards)\n                .enter()\n                .append('p')\n                .text(function (d) { return d })\n                .attr(\"class\", 'player2cards')\n\n            d3.select(\"#player3carddiv\").selectAll(\"p\")\n                .data(player3.holecards)\n                .enter()\n                .append('p')\n                .text(function (d) { return d })\n                .attr(\"class\", 'player3cards')\n        }\n\n        if (betTurn >= 4) {\n            turn = 0;\n            betTurn = 0;\n            dealTurn = 0;\n            middlecards = [];\n            pot.chips = 0;\n\n            for (let i = 0; i < players.length; i++) {\n                players[i].cardPool = [];\n                players[i].holecards = [];\n            }\n            d3.selectAll(\".player1cards\").remove();\n            d3.selectAll(\".player2cards\").remove();\n            d3.selectAll(\".player3cards\").remove();\n            d3.selectAll(\".flopcards\").remove();\n            d3.selectAll(\".playernames\").remove();\n            d3.selectAll(\".champ\").remove();\n\n            d3.select(\"#chipcount\").selectAll(\"p\")\n                .data(theData)\n                .enter()\n                .append(\"p\")\n                .text(function (d) { return d.name + \" : \" + d.chips; })\n                .attr(\"class\", \"playernames\");\n        }\n    }\n\n    document.getElementById('betbutton').onclick = function placeBet() {\n\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.beginPath();\n        ctx.arc(x1, y1, 10, 0, Math.PI * 2);\n        ctx.fillStyle = \"tomato\";\n        ctx.fill();\n        ctx.closePath();\n        ctx.strokeStyle = \"black\";\n        ctx.stroke();\n        x1 += dx;\n        y1 += dy;\n\n\n\n        if (betTurn === 0) {\n            if (turn % 3 === 0) {\n                player1.chips = player1.chips - 10;\n            } else if (turn % 3 === 1) {\n                player2.chips = player2.chips - 10;\n            } else if (turn % 3 === 2) {\n                player3.chips = player3.chips - 10;\n                betTurn += 1\n                c = cards.slice(0, 3)\n                middlecards = middlecards.concat(c);\n                player1.cardPool = player1.cardPool.concat(middlecards)\n                player2.cardPool = player2.cardPool.concat(middlecards)\n                player3.cardPool = player3.cardPool.concat(middlecards)\n                cards = cards.slice(3, 46);\n                \n                d3.select(\"#player1carddiv\").selectAll(\"span\")\n                    .data(middlecards)\n                    .enter()\n                    .append(\"span\")\n                    .text(function (d) { return d })\n                    .attr(\"class\", \"flopcards\")\n            }\n            turn += 1;\n            pot.chips += 10;\n        \n        d3.selectAll(\".playernames\").remove();\n\n\n        d3.select(\"#chipcount\").selectAll(\"p\")\n            .data(theData)\n            .enter()\n            .append(\"p\")\n            .text(function (d) { return d.name + \" : \" + d.chips; })\n            .attr(\"class\", \"playernames\");\n            \n        }else if (betTurn === 1 || betTurn === 2) {\n            if (turn % 3 === 0) {\n                player1.chips = player1.chips - 10;\n            } else if (turn % 3 === 1) {\n                player2.chips = player2.chips - 10;\n            } else if (turn % 3 === 2) {\n                player3.chips = player3.chips - 10;\n                betTurn += 1;\n                middlecards.push(cards[0]);\n                player1.cardPool.push(middlecards[middlecards.length - 1]);\n                player2.cardPool.push(middlecards[middlecards.length - 1]);\n                player3.cardPool.push(middlecards[middlecards.length - 1]);\n                cards.shift();\n                d3.selectAll('.flopcards').remove();\n                \n                d3.select('#player1carddiv').selectAll('span')\n                .data(middlecards)\n                .enter()\n                .append('span')\n                .text(function (d) {return d})\n                .attr(\"class\", 'flopcards')\n            }\n            turn += 1;\n            pot.chips += 10;\n            d3.selectAll(\".playernames\").remove();\n\n\n            d3.select(\"#chipcount\").selectAll(\"p\")\n                .data(theData)\n                .enter()\n                .append(\"p\")\n                .text(function (d) { return d.name + \" : \" + d.chips; })\n                .attr(\"class\", \"playernames\");\n        } else if (betTurn === 3) {\n            let hand1 = Hand.solve(player1.cardPool);\n            let hand2 = Hand.solve(player2.cardPool);\n            let hand3 = Hand.solve(player3.cardPool);\n            let hands = [hand1, hand2, hand3];\n            let winner = Hand.winners(hands);\n            let champ;\n            if (hand1.cardPool === winner[0].cardPool) {\n                champ = player1.name\n                player1.chips += pot.chips;\n            } else if (hand2.cardPool === winner[0].cardPool) {\n                champ = player2.name\n                player2.chips += pot.chips;\n            } else {\n                champ = player3.name\n                player3.chips += pot.chips;\n            }\n            console.log(champ)\n            // let victor = [champ]\n            // champ is a string of the winner's name\n            let champion = [{name: champ}];\n            d3.select(\".champ\").selectAll('p')\n            .data(champion)\n            .enter()\n            .append(\"p\")\n            .text(function (d) {return  d.name + ' wins the pot' })\n            .attr(\"class\", \"champ\")\n            betTurn += 1\n\n        }\n    } \n}\nexport default scoreboard;\n\n"],"sourceRoot":""}